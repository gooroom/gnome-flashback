/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __GF_SESSION_MANAGER_GEN_H__
#define __GF_SESSION_MANAGER_GEN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.SessionManager */

#define GF_TYPE_SESSION_MANAGER_GEN (gf_session_manager_gen_get_type ())
#define GF_SESSION_MANAGER_GEN(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_SESSION_MANAGER_GEN, GfSessionManagerGen))
#define GF_IS_SESSION_MANAGER_GEN(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_SESSION_MANAGER_GEN))
#define GF_SESSION_MANAGER_GEN_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GF_TYPE_SESSION_MANAGER_GEN, GfSessionManagerGenIface))

struct _GfSessionManagerGen;
typedef struct _GfSessionManagerGen GfSessionManagerGen;
typedef struct _GfSessionManagerGenIface GfSessionManagerGenIface;

struct _GfSessionManagerGenIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_is_session_running) (
    GfSessionManagerGen *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_register_client) (
    GfSessionManagerGen *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_app_id,
    const gchar *arg_client_startup_id);

  gboolean (*handle_setenv) (
    GfSessionManagerGen *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_variable,
    const gchar *arg_value);

  gboolean (*handle_unregister_client) (
    GfSessionManagerGen *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_client_id);

};

GType gf_session_manager_gen_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gf_session_manager_gen_interface_info (void);
guint gf_session_manager_gen_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gf_session_manager_gen_complete_setenv (
    GfSessionManagerGen *object,
    GDBusMethodInvocation *invocation);

void gf_session_manager_gen_complete_register_client (
    GfSessionManagerGen *object,
    GDBusMethodInvocation *invocation,
    const gchar *client_id);

void gf_session_manager_gen_complete_unregister_client (
    GfSessionManagerGen *object,
    GDBusMethodInvocation *invocation);

void gf_session_manager_gen_complete_is_session_running (
    GfSessionManagerGen *object,
    GDBusMethodInvocation *invocation,
    gboolean running);



/* D-Bus method calls: */
void gf_session_manager_gen_call_setenv (
    GfSessionManagerGen *proxy,
    const gchar *arg_variable,
    const gchar *arg_value,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_session_manager_gen_call_setenv_finish (
    GfSessionManagerGen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_session_manager_gen_call_setenv_sync (
    GfSessionManagerGen *proxy,
    const gchar *arg_variable,
    const gchar *arg_value,
    GCancellable *cancellable,
    GError **error);

void gf_session_manager_gen_call_register_client (
    GfSessionManagerGen *proxy,
    const gchar *arg_app_id,
    const gchar *arg_client_startup_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_session_manager_gen_call_register_client_finish (
    GfSessionManagerGen *proxy,
    gchar **out_client_id,
    GAsyncResult *res,
    GError **error);

gboolean gf_session_manager_gen_call_register_client_sync (
    GfSessionManagerGen *proxy,
    const gchar *arg_app_id,
    const gchar *arg_client_startup_id,
    gchar **out_client_id,
    GCancellable *cancellable,
    GError **error);

void gf_session_manager_gen_call_unregister_client (
    GfSessionManagerGen *proxy,
    const gchar *arg_client_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_session_manager_gen_call_unregister_client_finish (
    GfSessionManagerGen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_session_manager_gen_call_unregister_client_sync (
    GfSessionManagerGen *proxy,
    const gchar *arg_client_id,
    GCancellable *cancellable,
    GError **error);

void gf_session_manager_gen_call_is_session_running (
    GfSessionManagerGen *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_session_manager_gen_call_is_session_running_finish (
    GfSessionManagerGen *proxy,
    gboolean *out_running,
    GAsyncResult *res,
    GError **error);

gboolean gf_session_manager_gen_call_is_session_running_sync (
    GfSessionManagerGen *proxy,
    gboolean *out_running,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GF_TYPE_SESSION_MANAGER_GEN_PROXY (gf_session_manager_gen_proxy_get_type ())
#define GF_SESSION_MANAGER_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_SESSION_MANAGER_GEN_PROXY, GfSessionManagerGenProxy))
#define GF_SESSION_MANAGER_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_SESSION_MANAGER_GEN_PROXY, GfSessionManagerGenProxyClass))
#define GF_SESSION_MANAGER_GEN_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_SESSION_MANAGER_GEN_PROXY, GfSessionManagerGenProxyClass))
#define GF_IS_SESSION_MANAGER_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_SESSION_MANAGER_GEN_PROXY))
#define GF_IS_SESSION_MANAGER_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_SESSION_MANAGER_GEN_PROXY))

typedef struct _GfSessionManagerGenProxy GfSessionManagerGenProxy;
typedef struct _GfSessionManagerGenProxyClass GfSessionManagerGenProxyClass;
typedef struct _GfSessionManagerGenProxyPrivate GfSessionManagerGenProxyPrivate;

struct _GfSessionManagerGenProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GfSessionManagerGenProxyPrivate *priv;
};

struct _GfSessionManagerGenProxyClass
{
  GDBusProxyClass parent_class;
};

GType gf_session_manager_gen_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfSessionManagerGenProxy, g_object_unref)
#endif

void gf_session_manager_gen_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfSessionManagerGen *gf_session_manager_gen_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GfSessionManagerGen *gf_session_manager_gen_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gf_session_manager_gen_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfSessionManagerGen *gf_session_manager_gen_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GfSessionManagerGen *gf_session_manager_gen_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GF_TYPE_SESSION_MANAGER_GEN_SKELETON (gf_session_manager_gen_skeleton_get_type ())
#define GF_SESSION_MANAGER_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_SESSION_MANAGER_GEN_SKELETON, GfSessionManagerGenSkeleton))
#define GF_SESSION_MANAGER_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_SESSION_MANAGER_GEN_SKELETON, GfSessionManagerGenSkeletonClass))
#define GF_SESSION_MANAGER_GEN_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_SESSION_MANAGER_GEN_SKELETON, GfSessionManagerGenSkeletonClass))
#define GF_IS_SESSION_MANAGER_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_SESSION_MANAGER_GEN_SKELETON))
#define GF_IS_SESSION_MANAGER_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_SESSION_MANAGER_GEN_SKELETON))

typedef struct _GfSessionManagerGenSkeleton GfSessionManagerGenSkeleton;
typedef struct _GfSessionManagerGenSkeletonClass GfSessionManagerGenSkeletonClass;
typedef struct _GfSessionManagerGenSkeletonPrivate GfSessionManagerGenSkeletonPrivate;

struct _GfSessionManagerGenSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GfSessionManagerGenSkeletonPrivate *priv;
};

struct _GfSessionManagerGenSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gf_session_manager_gen_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfSessionManagerGenSkeleton, g_object_unref)
#endif

GfSessionManagerGen *gf_session_manager_gen_skeleton_new (void);


G_END_DECLS

#endif /* __GF_SESSION_MANAGER_GEN_H__ */
