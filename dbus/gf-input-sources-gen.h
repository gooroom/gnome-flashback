/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __GF_INPUT_SOURCES_GEN_H__
#define __GF_INPUT_SOURCES_GEN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.Flashback.InputSources */

#define GF_TYPE_INPUT_SOURCES_GEN (gf_input_sources_gen_get_type ())
#define GF_INPUT_SOURCES_GEN(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_INPUT_SOURCES_GEN, GfInputSourcesGen))
#define GF_IS_INPUT_SOURCES_GEN(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_INPUT_SOURCES_GEN))
#define GF_INPUT_SOURCES_GEN_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GF_TYPE_INPUT_SOURCES_GEN, GfInputSourcesGenIface))

struct _GfInputSourcesGen;
typedef struct _GfInputSourcesGen GfInputSourcesGen;
typedef struct _GfInputSourcesGenIface GfInputSourcesGenIface;

struct _GfInputSourcesGenIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_activate) (
    GfInputSourcesGen *object,
    GDBusMethodInvocation *invocation,
    guint arg_index);

  gboolean (*handle_activate_property) (
    GfInputSourcesGen *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_key);

  gboolean (*handle_get_input_sources) (
    GfInputSourcesGen *object,
    GDBusMethodInvocation *invocation);

  void (*changed) (
    GfInputSourcesGen *object);

};

GType gf_input_sources_gen_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gf_input_sources_gen_interface_info (void);
guint gf_input_sources_gen_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gf_input_sources_gen_complete_get_input_sources (
    GfInputSourcesGen *object,
    GDBusMethodInvocation *invocation,
    GVariant *input_sources,
    GVariant *current_source);

void gf_input_sources_gen_complete_activate (
    GfInputSourcesGen *object,
    GDBusMethodInvocation *invocation);

void gf_input_sources_gen_complete_activate_property (
    GfInputSourcesGen *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void gf_input_sources_gen_emit_changed (
    GfInputSourcesGen *object);



/* D-Bus method calls: */
void gf_input_sources_gen_call_get_input_sources (
    GfInputSourcesGen *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_input_sources_gen_call_get_input_sources_finish (
    GfInputSourcesGen *proxy,
    GVariant **out_input_sources,
    GVariant **out_current_source,
    GAsyncResult *res,
    GError **error);

gboolean gf_input_sources_gen_call_get_input_sources_sync (
    GfInputSourcesGen *proxy,
    GVariant **out_input_sources,
    GVariant **out_current_source,
    GCancellable *cancellable,
    GError **error);

void gf_input_sources_gen_call_activate (
    GfInputSourcesGen *proxy,
    guint arg_index,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_input_sources_gen_call_activate_finish (
    GfInputSourcesGen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_input_sources_gen_call_activate_sync (
    GfInputSourcesGen *proxy,
    guint arg_index,
    GCancellable *cancellable,
    GError **error);

void gf_input_sources_gen_call_activate_property (
    GfInputSourcesGen *proxy,
    const gchar *arg_key,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_input_sources_gen_call_activate_property_finish (
    GfInputSourcesGen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_input_sources_gen_call_activate_property_sync (
    GfInputSourcesGen *proxy,
    const gchar *arg_key,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GF_TYPE_INPUT_SOURCES_GEN_PROXY (gf_input_sources_gen_proxy_get_type ())
#define GF_INPUT_SOURCES_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_INPUT_SOURCES_GEN_PROXY, GfInputSourcesGenProxy))
#define GF_INPUT_SOURCES_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_INPUT_SOURCES_GEN_PROXY, GfInputSourcesGenProxyClass))
#define GF_INPUT_SOURCES_GEN_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_INPUT_SOURCES_GEN_PROXY, GfInputSourcesGenProxyClass))
#define GF_IS_INPUT_SOURCES_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_INPUT_SOURCES_GEN_PROXY))
#define GF_IS_INPUT_SOURCES_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_INPUT_SOURCES_GEN_PROXY))

typedef struct _GfInputSourcesGenProxy GfInputSourcesGenProxy;
typedef struct _GfInputSourcesGenProxyClass GfInputSourcesGenProxyClass;
typedef struct _GfInputSourcesGenProxyPrivate GfInputSourcesGenProxyPrivate;

struct _GfInputSourcesGenProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GfInputSourcesGenProxyPrivate *priv;
};

struct _GfInputSourcesGenProxyClass
{
  GDBusProxyClass parent_class;
};

GType gf_input_sources_gen_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfInputSourcesGenProxy, g_object_unref)
#endif

void gf_input_sources_gen_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfInputSourcesGen *gf_input_sources_gen_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GfInputSourcesGen *gf_input_sources_gen_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gf_input_sources_gen_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfInputSourcesGen *gf_input_sources_gen_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GfInputSourcesGen *gf_input_sources_gen_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GF_TYPE_INPUT_SOURCES_GEN_SKELETON (gf_input_sources_gen_skeleton_get_type ())
#define GF_INPUT_SOURCES_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_INPUT_SOURCES_GEN_SKELETON, GfInputSourcesGenSkeleton))
#define GF_INPUT_SOURCES_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_INPUT_SOURCES_GEN_SKELETON, GfInputSourcesGenSkeletonClass))
#define GF_INPUT_SOURCES_GEN_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_INPUT_SOURCES_GEN_SKELETON, GfInputSourcesGenSkeletonClass))
#define GF_IS_INPUT_SOURCES_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_INPUT_SOURCES_GEN_SKELETON))
#define GF_IS_INPUT_SOURCES_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_INPUT_SOURCES_GEN_SKELETON))

typedef struct _GfInputSourcesGenSkeleton GfInputSourcesGenSkeleton;
typedef struct _GfInputSourcesGenSkeletonClass GfInputSourcesGenSkeletonClass;
typedef struct _GfInputSourcesGenSkeletonPrivate GfInputSourcesGenSkeletonPrivate;

struct _GfInputSourcesGenSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GfInputSourcesGenSkeletonPrivate *priv;
};

struct _GfInputSourcesGenSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gf_input_sources_gen_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfInputSourcesGenSkeleton, g_object_unref)
#endif

GfInputSourcesGen *gf_input_sources_gen_skeleton_new (void);


G_END_DECLS

#endif /* __GF_INPUT_SOURCES_GEN_H__ */
