/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __GF_SHELL_GEN_H__
#define __GF_SHELL_GEN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.Shell */

#define GF_TYPE_SHELL_GEN (gf_shell_gen_get_type ())
#define GF_SHELL_GEN(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_SHELL_GEN, GfShellGen))
#define GF_IS_SHELL_GEN(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_SHELL_GEN))
#define GF_SHELL_GEN_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GF_TYPE_SHELL_GEN, GfShellGenIface))

struct _GfShellGen;
typedef struct _GfShellGen GfShellGen;
typedef struct _GfShellGenIface GfShellGenIface;

struct _GfShellGenIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_eval) (
    GfShellGen *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_script);

  gboolean (*handle_focus_app) (
    GfShellGen *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_id);

  gboolean (*handle_focus_search) (
    GfShellGen *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_grab_accelerator) (
    GfShellGen *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_accelerator,
    guint arg_modeFlags,
    guint arg_grabFlags);

  gboolean (*handle_grab_accelerators) (
    GfShellGen *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_accelerators);

  gboolean (*handle_hide_monitor_labels) (
    GfShellGen *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_show_applications) (
    GfShellGen *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_show_monitor_labels) (
    GfShellGen *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_params);

  gboolean (*handle_show_osd) (
    GfShellGen *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_params);

  gboolean (*handle_ungrab_accelerator) (
    GfShellGen *object,
    GDBusMethodInvocation *invocation,
    guint arg_action);

  gboolean (*handle_ungrab_accelerators) (
    GfShellGen *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_actions);

  const gchar * (*get_mode) (GfShellGen *object);

  gboolean  (*get_overview_active) (GfShellGen *object);

  const gchar * (*get_shell_version) (GfShellGen *object);

  void (*accelerator_activated) (
    GfShellGen *object,
    guint arg_action,
    GVariant *arg_parameters);

};

GType gf_shell_gen_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gf_shell_gen_interface_info (void);
guint gf_shell_gen_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gf_shell_gen_complete_eval (
    GfShellGen *object,
    GDBusMethodInvocation *invocation,
    gboolean success,
    const gchar *result);

void gf_shell_gen_complete_focus_search (
    GfShellGen *object,
    GDBusMethodInvocation *invocation);

void gf_shell_gen_complete_show_osd (
    GfShellGen *object,
    GDBusMethodInvocation *invocation);

void gf_shell_gen_complete_show_monitor_labels (
    GfShellGen *object,
    GDBusMethodInvocation *invocation);

void gf_shell_gen_complete_hide_monitor_labels (
    GfShellGen *object,
    GDBusMethodInvocation *invocation);

void gf_shell_gen_complete_focus_app (
    GfShellGen *object,
    GDBusMethodInvocation *invocation);

void gf_shell_gen_complete_show_applications (
    GfShellGen *object,
    GDBusMethodInvocation *invocation);

void gf_shell_gen_complete_grab_accelerator (
    GfShellGen *object,
    GDBusMethodInvocation *invocation,
    guint action);

void gf_shell_gen_complete_grab_accelerators (
    GfShellGen *object,
    GDBusMethodInvocation *invocation,
    GVariant *actions);

void gf_shell_gen_complete_ungrab_accelerator (
    GfShellGen *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void gf_shell_gen_complete_ungrab_accelerators (
    GfShellGen *object,
    GDBusMethodInvocation *invocation,
    gboolean success);



/* D-Bus signal emissions functions: */
void gf_shell_gen_emit_accelerator_activated (
    GfShellGen *object,
    guint arg_action,
    GVariant *arg_parameters);



/* D-Bus method calls: */
void gf_shell_gen_call_eval (
    GfShellGen *proxy,
    const gchar *arg_script,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_shell_gen_call_eval_finish (
    GfShellGen *proxy,
    gboolean *out_success,
    gchar **out_result,
    GAsyncResult *res,
    GError **error);

gboolean gf_shell_gen_call_eval_sync (
    GfShellGen *proxy,
    const gchar *arg_script,
    gboolean *out_success,
    gchar **out_result,
    GCancellable *cancellable,
    GError **error);

void gf_shell_gen_call_focus_search (
    GfShellGen *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_shell_gen_call_focus_search_finish (
    GfShellGen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_shell_gen_call_focus_search_sync (
    GfShellGen *proxy,
    GCancellable *cancellable,
    GError **error);

void gf_shell_gen_call_show_osd (
    GfShellGen *proxy,
    GVariant *arg_params,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_shell_gen_call_show_osd_finish (
    GfShellGen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_shell_gen_call_show_osd_sync (
    GfShellGen *proxy,
    GVariant *arg_params,
    GCancellable *cancellable,
    GError **error);

void gf_shell_gen_call_show_monitor_labels (
    GfShellGen *proxy,
    GVariant *arg_params,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_shell_gen_call_show_monitor_labels_finish (
    GfShellGen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_shell_gen_call_show_monitor_labels_sync (
    GfShellGen *proxy,
    GVariant *arg_params,
    GCancellable *cancellable,
    GError **error);

void gf_shell_gen_call_hide_monitor_labels (
    GfShellGen *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_shell_gen_call_hide_monitor_labels_finish (
    GfShellGen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_shell_gen_call_hide_monitor_labels_sync (
    GfShellGen *proxy,
    GCancellable *cancellable,
    GError **error);

void gf_shell_gen_call_focus_app (
    GfShellGen *proxy,
    const gchar *arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_shell_gen_call_focus_app_finish (
    GfShellGen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_shell_gen_call_focus_app_sync (
    GfShellGen *proxy,
    const gchar *arg_id,
    GCancellable *cancellable,
    GError **error);

void gf_shell_gen_call_show_applications (
    GfShellGen *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_shell_gen_call_show_applications_finish (
    GfShellGen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_shell_gen_call_show_applications_sync (
    GfShellGen *proxy,
    GCancellable *cancellable,
    GError **error);

void gf_shell_gen_call_grab_accelerator (
    GfShellGen *proxy,
    const gchar *arg_accelerator,
    guint arg_modeFlags,
    guint arg_grabFlags,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_shell_gen_call_grab_accelerator_finish (
    GfShellGen *proxy,
    guint *out_action,
    GAsyncResult *res,
    GError **error);

gboolean gf_shell_gen_call_grab_accelerator_sync (
    GfShellGen *proxy,
    const gchar *arg_accelerator,
    guint arg_modeFlags,
    guint arg_grabFlags,
    guint *out_action,
    GCancellable *cancellable,
    GError **error);

void gf_shell_gen_call_grab_accelerators (
    GfShellGen *proxy,
    GVariant *arg_accelerators,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_shell_gen_call_grab_accelerators_finish (
    GfShellGen *proxy,
    GVariant **out_actions,
    GAsyncResult *res,
    GError **error);

gboolean gf_shell_gen_call_grab_accelerators_sync (
    GfShellGen *proxy,
    GVariant *arg_accelerators,
    GVariant **out_actions,
    GCancellable *cancellable,
    GError **error);

void gf_shell_gen_call_ungrab_accelerator (
    GfShellGen *proxy,
    guint arg_action,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_shell_gen_call_ungrab_accelerator_finish (
    GfShellGen *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean gf_shell_gen_call_ungrab_accelerator_sync (
    GfShellGen *proxy,
    guint arg_action,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void gf_shell_gen_call_ungrab_accelerators (
    GfShellGen *proxy,
    GVariant *arg_actions,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_shell_gen_call_ungrab_accelerators_finish (
    GfShellGen *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean gf_shell_gen_call_ungrab_accelerators_sync (
    GfShellGen *proxy,
    GVariant *arg_actions,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *gf_shell_gen_get_mode (GfShellGen *object);
gchar *gf_shell_gen_dup_mode (GfShellGen *object);
void gf_shell_gen_set_mode (GfShellGen *object, const gchar *value);

gboolean gf_shell_gen_get_overview_active (GfShellGen *object);
void gf_shell_gen_set_overview_active (GfShellGen *object, gboolean value);

const gchar *gf_shell_gen_get_shell_version (GfShellGen *object);
gchar *gf_shell_gen_dup_shell_version (GfShellGen *object);
void gf_shell_gen_set_shell_version (GfShellGen *object, const gchar *value);


/* ---- */

#define GF_TYPE_SHELL_GEN_PROXY (gf_shell_gen_proxy_get_type ())
#define GF_SHELL_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_SHELL_GEN_PROXY, GfShellGenProxy))
#define GF_SHELL_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_SHELL_GEN_PROXY, GfShellGenProxyClass))
#define GF_SHELL_GEN_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_SHELL_GEN_PROXY, GfShellGenProxyClass))
#define GF_IS_SHELL_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_SHELL_GEN_PROXY))
#define GF_IS_SHELL_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_SHELL_GEN_PROXY))

typedef struct _GfShellGenProxy GfShellGenProxy;
typedef struct _GfShellGenProxyClass GfShellGenProxyClass;
typedef struct _GfShellGenProxyPrivate GfShellGenProxyPrivate;

struct _GfShellGenProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GfShellGenProxyPrivate *priv;
};

struct _GfShellGenProxyClass
{
  GDBusProxyClass parent_class;
};

GType gf_shell_gen_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfShellGenProxy, g_object_unref)
#endif

void gf_shell_gen_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfShellGen *gf_shell_gen_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GfShellGen *gf_shell_gen_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gf_shell_gen_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfShellGen *gf_shell_gen_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GfShellGen *gf_shell_gen_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GF_TYPE_SHELL_GEN_SKELETON (gf_shell_gen_skeleton_get_type ())
#define GF_SHELL_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_SHELL_GEN_SKELETON, GfShellGenSkeleton))
#define GF_SHELL_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_SHELL_GEN_SKELETON, GfShellGenSkeletonClass))
#define GF_SHELL_GEN_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_SHELL_GEN_SKELETON, GfShellGenSkeletonClass))
#define GF_IS_SHELL_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_SHELL_GEN_SKELETON))
#define GF_IS_SHELL_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_SHELL_GEN_SKELETON))

typedef struct _GfShellGenSkeleton GfShellGenSkeleton;
typedef struct _GfShellGenSkeletonClass GfShellGenSkeletonClass;
typedef struct _GfShellGenSkeletonPrivate GfShellGenSkeletonPrivate;

struct _GfShellGenSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GfShellGenSkeletonPrivate *priv;
};

struct _GfShellGenSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gf_shell_gen_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfShellGenSkeleton, g_object_unref)
#endif

GfShellGen *gf_shell_gen_skeleton_new (void);


G_END_DECLS

#endif /* __GF_SHELL_GEN_H__ */
