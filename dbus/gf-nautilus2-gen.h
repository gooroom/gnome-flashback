/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __GF_NAUTILUS2_GEN_H__
#define __GF_NAUTILUS2_GEN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.Nautilus.FileOperations2 */

#define GF_TYPE_NAUTILUS2_GEN (gf_nautilus2_gen_get_type ())
#define GF_NAUTILUS2_GEN(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_NAUTILUS2_GEN, GfNautilus2Gen))
#define GF_IS_NAUTILUS2_GEN(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_NAUTILUS2_GEN))
#define GF_NAUTILUS2_GEN_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GF_TYPE_NAUTILUS2_GEN, GfNautilus2GenIface))

struct _GfNautilus2Gen;
typedef struct _GfNautilus2Gen GfNautilus2Gen;
typedef struct _GfNautilus2GenIface GfNautilus2GenIface;

struct _GfNautilus2GenIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_copy_uris) (
    GfNautilus2Gen *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_sources,
    const gchar *arg_destination,
    GVariant *arg_platform_data);

  gboolean (*handle_create_folder) (
    GfNautilus2Gen *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_parent_uri,
    const gchar *arg_new_folder_name,
    GVariant *arg_platform_data);

  gboolean (*handle_delete_uris) (
    GfNautilus2Gen *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_uris,
    GVariant *arg_platform_data);

  gboolean (*handle_empty_trash) (
    GfNautilus2Gen *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_ask_confirmation,
    GVariant *arg_platform_data);

  gboolean (*handle_move_uris) (
    GfNautilus2Gen *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_sources,
    const gchar *arg_destination,
    GVariant *arg_platform_data);

  gboolean (*handle_redo) (
    GfNautilus2Gen *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_platform_data);

  gboolean (*handle_rename_uri) (
    GfNautilus2Gen *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uri,
    const gchar *arg_new_name,
    GVariant *arg_platform_data);

  gboolean (*handle_trash_uris) (
    GfNautilus2Gen *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_uris,
    GVariant *arg_platform_data);

  gboolean (*handle_undo) (
    GfNautilus2Gen *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_platform_data);

  gint  (*get_undo_status) (GfNautilus2Gen *object);

};

GType gf_nautilus2_gen_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gf_nautilus2_gen_interface_info (void);
guint gf_nautilus2_gen_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gf_nautilus2_gen_complete_copy_uris (
    GfNautilus2Gen *object,
    GDBusMethodInvocation *invocation);

void gf_nautilus2_gen_complete_move_uris (
    GfNautilus2Gen *object,
    GDBusMethodInvocation *invocation);

void gf_nautilus2_gen_complete_empty_trash (
    GfNautilus2Gen *object,
    GDBusMethodInvocation *invocation);

void gf_nautilus2_gen_complete_trash_uris (
    GfNautilus2Gen *object,
    GDBusMethodInvocation *invocation);

void gf_nautilus2_gen_complete_delete_uris (
    GfNautilus2Gen *object,
    GDBusMethodInvocation *invocation);

void gf_nautilus2_gen_complete_create_folder (
    GfNautilus2Gen *object,
    GDBusMethodInvocation *invocation);

void gf_nautilus2_gen_complete_rename_uri (
    GfNautilus2Gen *object,
    GDBusMethodInvocation *invocation);

void gf_nautilus2_gen_complete_undo (
    GfNautilus2Gen *object,
    GDBusMethodInvocation *invocation);

void gf_nautilus2_gen_complete_redo (
    GfNautilus2Gen *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void gf_nautilus2_gen_call_copy_uris (
    GfNautilus2Gen *proxy,
    const gchar *const *arg_sources,
    const gchar *arg_destination,
    GVariant *arg_platform_data,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_nautilus2_gen_call_copy_uris_finish (
    GfNautilus2Gen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_nautilus2_gen_call_copy_uris_sync (
    GfNautilus2Gen *proxy,
    const gchar *const *arg_sources,
    const gchar *arg_destination,
    GVariant *arg_platform_data,
    GCancellable *cancellable,
    GError **error);

void gf_nautilus2_gen_call_move_uris (
    GfNautilus2Gen *proxy,
    const gchar *const *arg_sources,
    const gchar *arg_destination,
    GVariant *arg_platform_data,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_nautilus2_gen_call_move_uris_finish (
    GfNautilus2Gen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_nautilus2_gen_call_move_uris_sync (
    GfNautilus2Gen *proxy,
    const gchar *const *arg_sources,
    const gchar *arg_destination,
    GVariant *arg_platform_data,
    GCancellable *cancellable,
    GError **error);

void gf_nautilus2_gen_call_empty_trash (
    GfNautilus2Gen *proxy,
    gboolean arg_ask_confirmation,
    GVariant *arg_platform_data,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_nautilus2_gen_call_empty_trash_finish (
    GfNautilus2Gen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_nautilus2_gen_call_empty_trash_sync (
    GfNautilus2Gen *proxy,
    gboolean arg_ask_confirmation,
    GVariant *arg_platform_data,
    GCancellable *cancellable,
    GError **error);

void gf_nautilus2_gen_call_trash_uris (
    GfNautilus2Gen *proxy,
    const gchar *const *arg_uris,
    GVariant *arg_platform_data,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_nautilus2_gen_call_trash_uris_finish (
    GfNautilus2Gen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_nautilus2_gen_call_trash_uris_sync (
    GfNautilus2Gen *proxy,
    const gchar *const *arg_uris,
    GVariant *arg_platform_data,
    GCancellable *cancellable,
    GError **error);

void gf_nautilus2_gen_call_delete_uris (
    GfNautilus2Gen *proxy,
    const gchar *const *arg_uris,
    GVariant *arg_platform_data,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_nautilus2_gen_call_delete_uris_finish (
    GfNautilus2Gen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_nautilus2_gen_call_delete_uris_sync (
    GfNautilus2Gen *proxy,
    const gchar *const *arg_uris,
    GVariant *arg_platform_data,
    GCancellable *cancellable,
    GError **error);

void gf_nautilus2_gen_call_create_folder (
    GfNautilus2Gen *proxy,
    const gchar *arg_parent_uri,
    const gchar *arg_new_folder_name,
    GVariant *arg_platform_data,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_nautilus2_gen_call_create_folder_finish (
    GfNautilus2Gen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_nautilus2_gen_call_create_folder_sync (
    GfNautilus2Gen *proxy,
    const gchar *arg_parent_uri,
    const gchar *arg_new_folder_name,
    GVariant *arg_platform_data,
    GCancellable *cancellable,
    GError **error);

void gf_nautilus2_gen_call_rename_uri (
    GfNautilus2Gen *proxy,
    const gchar *arg_uri,
    const gchar *arg_new_name,
    GVariant *arg_platform_data,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_nautilus2_gen_call_rename_uri_finish (
    GfNautilus2Gen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_nautilus2_gen_call_rename_uri_sync (
    GfNautilus2Gen *proxy,
    const gchar *arg_uri,
    const gchar *arg_new_name,
    GVariant *arg_platform_data,
    GCancellable *cancellable,
    GError **error);

void gf_nautilus2_gen_call_undo (
    GfNautilus2Gen *proxy,
    GVariant *arg_platform_data,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_nautilus2_gen_call_undo_finish (
    GfNautilus2Gen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_nautilus2_gen_call_undo_sync (
    GfNautilus2Gen *proxy,
    GVariant *arg_platform_data,
    GCancellable *cancellable,
    GError **error);

void gf_nautilus2_gen_call_redo (
    GfNautilus2Gen *proxy,
    GVariant *arg_platform_data,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_nautilus2_gen_call_redo_finish (
    GfNautilus2Gen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_nautilus2_gen_call_redo_sync (
    GfNautilus2Gen *proxy,
    GVariant *arg_platform_data,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
gint gf_nautilus2_gen_get_undo_status (GfNautilus2Gen *object);
void gf_nautilus2_gen_set_undo_status (GfNautilus2Gen *object, gint value);


/* ---- */

#define GF_TYPE_NAUTILUS2_GEN_PROXY (gf_nautilus2_gen_proxy_get_type ())
#define GF_NAUTILUS2_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_NAUTILUS2_GEN_PROXY, GfNautilus2GenProxy))
#define GF_NAUTILUS2_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_NAUTILUS2_GEN_PROXY, GfNautilus2GenProxyClass))
#define GF_NAUTILUS2_GEN_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_NAUTILUS2_GEN_PROXY, GfNautilus2GenProxyClass))
#define GF_IS_NAUTILUS2_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_NAUTILUS2_GEN_PROXY))
#define GF_IS_NAUTILUS2_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_NAUTILUS2_GEN_PROXY))

typedef struct _GfNautilus2GenProxy GfNautilus2GenProxy;
typedef struct _GfNautilus2GenProxyClass GfNautilus2GenProxyClass;
typedef struct _GfNautilus2GenProxyPrivate GfNautilus2GenProxyPrivate;

struct _GfNautilus2GenProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GfNautilus2GenProxyPrivate *priv;
};

struct _GfNautilus2GenProxyClass
{
  GDBusProxyClass parent_class;
};

GType gf_nautilus2_gen_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfNautilus2GenProxy, g_object_unref)
#endif

void gf_nautilus2_gen_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfNautilus2Gen *gf_nautilus2_gen_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GfNautilus2Gen *gf_nautilus2_gen_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gf_nautilus2_gen_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfNautilus2Gen *gf_nautilus2_gen_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GfNautilus2Gen *gf_nautilus2_gen_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GF_TYPE_NAUTILUS2_GEN_SKELETON (gf_nautilus2_gen_skeleton_get_type ())
#define GF_NAUTILUS2_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_NAUTILUS2_GEN_SKELETON, GfNautilus2GenSkeleton))
#define GF_NAUTILUS2_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_NAUTILUS2_GEN_SKELETON, GfNautilus2GenSkeletonClass))
#define GF_NAUTILUS2_GEN_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_NAUTILUS2_GEN_SKELETON, GfNautilus2GenSkeletonClass))
#define GF_IS_NAUTILUS2_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_NAUTILUS2_GEN_SKELETON))
#define GF_IS_NAUTILUS2_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_NAUTILUS2_GEN_SKELETON))

typedef struct _GfNautilus2GenSkeleton GfNautilus2GenSkeleton;
typedef struct _GfNautilus2GenSkeletonClass GfNautilus2GenSkeletonClass;
typedef struct _GfNautilus2GenSkeletonPrivate GfNautilus2GenSkeletonPrivate;

struct _GfNautilus2GenSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GfNautilus2GenSkeletonPrivate *priv;
};

struct _GfNautilus2GenSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gf_nautilus2_gen_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfNautilus2GenSkeleton, g_object_unref)
#endif

GfNautilus2Gen *gf_nautilus2_gen_skeleton_new (void);


G_END_DECLS

#endif /* __GF_NAUTILUS2_GEN_H__ */
