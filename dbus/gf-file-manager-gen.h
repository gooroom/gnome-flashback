/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __GF_FILE_MANAGER_GEN_H__
#define __GF_FILE_MANAGER_GEN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.FileManager1 */

#define GF_TYPE_FILE_MANAGER_GEN (gf_file_manager_gen_get_type ())
#define GF_FILE_MANAGER_GEN(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_FILE_MANAGER_GEN, GfFileManagerGen))
#define GF_IS_FILE_MANAGER_GEN(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_FILE_MANAGER_GEN))
#define GF_FILE_MANAGER_GEN_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GF_TYPE_FILE_MANAGER_GEN, GfFileManagerGenIface))

struct _GfFileManagerGen;
typedef struct _GfFileManagerGen GfFileManagerGen;
typedef struct _GfFileManagerGenIface GfFileManagerGenIface;

struct _GfFileManagerGenIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_show_folders) (
    GfFileManagerGen *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_URIs,
    const gchar *arg_StartupId);

  gboolean (*handle_show_item_properties) (
    GfFileManagerGen *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_URIs,
    const gchar *arg_StartupId);

  gboolean (*handle_show_items) (
    GfFileManagerGen *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_URIs,
    const gchar *arg_StartupId);

};

GType gf_file_manager_gen_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gf_file_manager_gen_interface_info (void);
guint gf_file_manager_gen_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gf_file_manager_gen_complete_show_folders (
    GfFileManagerGen *object,
    GDBusMethodInvocation *invocation);

void gf_file_manager_gen_complete_show_items (
    GfFileManagerGen *object,
    GDBusMethodInvocation *invocation);

void gf_file_manager_gen_complete_show_item_properties (
    GfFileManagerGen *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void gf_file_manager_gen_call_show_folders (
    GfFileManagerGen *proxy,
    const gchar *const *arg_URIs,
    const gchar *arg_StartupId,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_file_manager_gen_call_show_folders_finish (
    GfFileManagerGen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_file_manager_gen_call_show_folders_sync (
    GfFileManagerGen *proxy,
    const gchar *const *arg_URIs,
    const gchar *arg_StartupId,
    GCancellable *cancellable,
    GError **error);

void gf_file_manager_gen_call_show_items (
    GfFileManagerGen *proxy,
    const gchar *const *arg_URIs,
    const gchar *arg_StartupId,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_file_manager_gen_call_show_items_finish (
    GfFileManagerGen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_file_manager_gen_call_show_items_sync (
    GfFileManagerGen *proxy,
    const gchar *const *arg_URIs,
    const gchar *arg_StartupId,
    GCancellable *cancellable,
    GError **error);

void gf_file_manager_gen_call_show_item_properties (
    GfFileManagerGen *proxy,
    const gchar *const *arg_URIs,
    const gchar *arg_StartupId,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_file_manager_gen_call_show_item_properties_finish (
    GfFileManagerGen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_file_manager_gen_call_show_item_properties_sync (
    GfFileManagerGen *proxy,
    const gchar *const *arg_URIs,
    const gchar *arg_StartupId,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GF_TYPE_FILE_MANAGER_GEN_PROXY (gf_file_manager_gen_proxy_get_type ())
#define GF_FILE_MANAGER_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_FILE_MANAGER_GEN_PROXY, GfFileManagerGenProxy))
#define GF_FILE_MANAGER_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_FILE_MANAGER_GEN_PROXY, GfFileManagerGenProxyClass))
#define GF_FILE_MANAGER_GEN_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_FILE_MANAGER_GEN_PROXY, GfFileManagerGenProxyClass))
#define GF_IS_FILE_MANAGER_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_FILE_MANAGER_GEN_PROXY))
#define GF_IS_FILE_MANAGER_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_FILE_MANAGER_GEN_PROXY))

typedef struct _GfFileManagerGenProxy GfFileManagerGenProxy;
typedef struct _GfFileManagerGenProxyClass GfFileManagerGenProxyClass;
typedef struct _GfFileManagerGenProxyPrivate GfFileManagerGenProxyPrivate;

struct _GfFileManagerGenProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GfFileManagerGenProxyPrivate *priv;
};

struct _GfFileManagerGenProxyClass
{
  GDBusProxyClass parent_class;
};

GType gf_file_manager_gen_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfFileManagerGenProxy, g_object_unref)
#endif

void gf_file_manager_gen_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfFileManagerGen *gf_file_manager_gen_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GfFileManagerGen *gf_file_manager_gen_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gf_file_manager_gen_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfFileManagerGen *gf_file_manager_gen_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GfFileManagerGen *gf_file_manager_gen_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GF_TYPE_FILE_MANAGER_GEN_SKELETON (gf_file_manager_gen_skeleton_get_type ())
#define GF_FILE_MANAGER_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_FILE_MANAGER_GEN_SKELETON, GfFileManagerGenSkeleton))
#define GF_FILE_MANAGER_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_FILE_MANAGER_GEN_SKELETON, GfFileManagerGenSkeletonClass))
#define GF_FILE_MANAGER_GEN_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_FILE_MANAGER_GEN_SKELETON, GfFileManagerGenSkeletonClass))
#define GF_IS_FILE_MANAGER_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_FILE_MANAGER_GEN_SKELETON))
#define GF_IS_FILE_MANAGER_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_FILE_MANAGER_GEN_SKELETON))

typedef struct _GfFileManagerGenSkeleton GfFileManagerGenSkeleton;
typedef struct _GfFileManagerGenSkeletonClass GfFileManagerGenSkeletonClass;
typedef struct _GfFileManagerGenSkeletonPrivate GfFileManagerGenSkeletonPrivate;

struct _GfFileManagerGenSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GfFileManagerGenSkeletonPrivate *priv;
};

struct _GfFileManagerGenSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gf_file_manager_gen_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfFileManagerGenSkeleton, g_object_unref)
#endif

GfFileManagerGen *gf_file_manager_gen_skeleton_new (void);


G_END_DECLS

#endif /* __GF_FILE_MANAGER_GEN_H__ */
