/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __GF_ACCOUNTS_USER_GEN_H__
#define __GF_ACCOUNTS_USER_GEN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.Accounts.User */

#define GF_TYPE_ACCOUNTS_USER_GEN (gf_accounts_user_gen_get_type ())
#define GF_ACCOUNTS_USER_GEN(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_ACCOUNTS_USER_GEN, GfAccountsUserGen))
#define GF_IS_ACCOUNTS_USER_GEN(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_ACCOUNTS_USER_GEN))
#define GF_ACCOUNTS_USER_GEN_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GF_TYPE_ACCOUNTS_USER_GEN, GfAccountsUserGenIface))

struct _GfAccountsUserGen;
typedef struct _GfAccountsUserGen GfAccountsUserGen;
typedef struct _GfAccountsUserGenIface GfAccountsUserGenIface;

struct _GfAccountsUserGenIface
{
  GTypeInterface parent_iface;

  const gchar * (*get_icon_file) (GfAccountsUserGen *object);

};

GType gf_accounts_user_gen_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gf_accounts_user_gen_interface_info (void);
guint gf_accounts_user_gen_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
const gchar *gf_accounts_user_gen_get_icon_file (GfAccountsUserGen *object);
gchar *gf_accounts_user_gen_dup_icon_file (GfAccountsUserGen *object);
void gf_accounts_user_gen_set_icon_file (GfAccountsUserGen *object, const gchar *value);


/* ---- */

#define GF_TYPE_ACCOUNTS_USER_GEN_PROXY (gf_accounts_user_gen_proxy_get_type ())
#define GF_ACCOUNTS_USER_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_ACCOUNTS_USER_GEN_PROXY, GfAccountsUserGenProxy))
#define GF_ACCOUNTS_USER_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_ACCOUNTS_USER_GEN_PROXY, GfAccountsUserGenProxyClass))
#define GF_ACCOUNTS_USER_GEN_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_ACCOUNTS_USER_GEN_PROXY, GfAccountsUserGenProxyClass))
#define GF_IS_ACCOUNTS_USER_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_ACCOUNTS_USER_GEN_PROXY))
#define GF_IS_ACCOUNTS_USER_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_ACCOUNTS_USER_GEN_PROXY))

typedef struct _GfAccountsUserGenProxy GfAccountsUserGenProxy;
typedef struct _GfAccountsUserGenProxyClass GfAccountsUserGenProxyClass;
typedef struct _GfAccountsUserGenProxyPrivate GfAccountsUserGenProxyPrivate;

struct _GfAccountsUserGenProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GfAccountsUserGenProxyPrivate *priv;
};

struct _GfAccountsUserGenProxyClass
{
  GDBusProxyClass parent_class;
};

GType gf_accounts_user_gen_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfAccountsUserGenProxy, g_object_unref)
#endif

void gf_accounts_user_gen_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfAccountsUserGen *gf_accounts_user_gen_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GfAccountsUserGen *gf_accounts_user_gen_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gf_accounts_user_gen_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfAccountsUserGen *gf_accounts_user_gen_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GfAccountsUserGen *gf_accounts_user_gen_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GF_TYPE_ACCOUNTS_USER_GEN_SKELETON (gf_accounts_user_gen_skeleton_get_type ())
#define GF_ACCOUNTS_USER_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_ACCOUNTS_USER_GEN_SKELETON, GfAccountsUserGenSkeleton))
#define GF_ACCOUNTS_USER_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_ACCOUNTS_USER_GEN_SKELETON, GfAccountsUserGenSkeletonClass))
#define GF_ACCOUNTS_USER_GEN_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_ACCOUNTS_USER_GEN_SKELETON, GfAccountsUserGenSkeletonClass))
#define GF_IS_ACCOUNTS_USER_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_ACCOUNTS_USER_GEN_SKELETON))
#define GF_IS_ACCOUNTS_USER_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_ACCOUNTS_USER_GEN_SKELETON))

typedef struct _GfAccountsUserGenSkeleton GfAccountsUserGenSkeleton;
typedef struct _GfAccountsUserGenSkeletonClass GfAccountsUserGenSkeletonClass;
typedef struct _GfAccountsUserGenSkeletonPrivate GfAccountsUserGenSkeletonPrivate;

struct _GfAccountsUserGenSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GfAccountsUserGenSkeletonPrivate *priv;
};

struct _GfAccountsUserGenSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gf_accounts_user_gen_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfAccountsUserGenSkeleton, g_object_unref)
#endif

GfAccountsUserGen *gf_accounts_user_gen_skeleton_new (void);


G_END_DECLS

#endif /* __GF_ACCOUNTS_USER_GEN_H__ */
