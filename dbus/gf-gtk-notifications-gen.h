/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __GF_GTK_NOTIFICATIONS_GEN_H__
#define __GF_GTK_NOTIFICATIONS_GEN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gtk.Notifications */

#define GF_TYPE_GTK_NOTIFICATIONS_GEN (gf_gtk_notifications_gen_get_type ())
#define GF_GTK_NOTIFICATIONS_GEN(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_GTK_NOTIFICATIONS_GEN, GfGtkNotificationsGen))
#define GF_IS_GTK_NOTIFICATIONS_GEN(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_GTK_NOTIFICATIONS_GEN))
#define GF_GTK_NOTIFICATIONS_GEN_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GF_TYPE_GTK_NOTIFICATIONS_GEN, GfGtkNotificationsGenIface))

struct _GfGtkNotificationsGen;
typedef struct _GfGtkNotificationsGen GfGtkNotificationsGen;
typedef struct _GfGtkNotificationsGenIface GfGtkNotificationsGenIface;

struct _GfGtkNotificationsGenIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_add_notification) (
    GfGtkNotificationsGen *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    GVariant *arg_unnamed_arg2);

  gboolean (*handle_remove_notification) (
    GfGtkNotificationsGen *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1);

};

GType gf_gtk_notifications_gen_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gf_gtk_notifications_gen_interface_info (void);
guint gf_gtk_notifications_gen_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gf_gtk_notifications_gen_complete_add_notification (
    GfGtkNotificationsGen *object,
    GDBusMethodInvocation *invocation);

void gf_gtk_notifications_gen_complete_remove_notification (
    GfGtkNotificationsGen *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void gf_gtk_notifications_gen_call_add_notification (
    GfGtkNotificationsGen *proxy,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    GVariant *arg_unnamed_arg2,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_gtk_notifications_gen_call_add_notification_finish (
    GfGtkNotificationsGen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_gtk_notifications_gen_call_add_notification_sync (
    GfGtkNotificationsGen *proxy,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    GVariant *arg_unnamed_arg2,
    GCancellable *cancellable,
    GError **error);

void gf_gtk_notifications_gen_call_remove_notification (
    GfGtkNotificationsGen *proxy,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_gtk_notifications_gen_call_remove_notification_finish (
    GfGtkNotificationsGen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_gtk_notifications_gen_call_remove_notification_sync (
    GfGtkNotificationsGen *proxy,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GF_TYPE_GTK_NOTIFICATIONS_GEN_PROXY (gf_gtk_notifications_gen_proxy_get_type ())
#define GF_GTK_NOTIFICATIONS_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_GTK_NOTIFICATIONS_GEN_PROXY, GfGtkNotificationsGenProxy))
#define GF_GTK_NOTIFICATIONS_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_GTK_NOTIFICATIONS_GEN_PROXY, GfGtkNotificationsGenProxyClass))
#define GF_GTK_NOTIFICATIONS_GEN_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_GTK_NOTIFICATIONS_GEN_PROXY, GfGtkNotificationsGenProxyClass))
#define GF_IS_GTK_NOTIFICATIONS_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_GTK_NOTIFICATIONS_GEN_PROXY))
#define GF_IS_GTK_NOTIFICATIONS_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_GTK_NOTIFICATIONS_GEN_PROXY))

typedef struct _GfGtkNotificationsGenProxy GfGtkNotificationsGenProxy;
typedef struct _GfGtkNotificationsGenProxyClass GfGtkNotificationsGenProxyClass;
typedef struct _GfGtkNotificationsGenProxyPrivate GfGtkNotificationsGenProxyPrivate;

struct _GfGtkNotificationsGenProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GfGtkNotificationsGenProxyPrivate *priv;
};

struct _GfGtkNotificationsGenProxyClass
{
  GDBusProxyClass parent_class;
};

GType gf_gtk_notifications_gen_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfGtkNotificationsGenProxy, g_object_unref)
#endif

void gf_gtk_notifications_gen_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfGtkNotificationsGen *gf_gtk_notifications_gen_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GfGtkNotificationsGen *gf_gtk_notifications_gen_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gf_gtk_notifications_gen_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfGtkNotificationsGen *gf_gtk_notifications_gen_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GfGtkNotificationsGen *gf_gtk_notifications_gen_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GF_TYPE_GTK_NOTIFICATIONS_GEN_SKELETON (gf_gtk_notifications_gen_skeleton_get_type ())
#define GF_GTK_NOTIFICATIONS_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_GTK_NOTIFICATIONS_GEN_SKELETON, GfGtkNotificationsGenSkeleton))
#define GF_GTK_NOTIFICATIONS_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_GTK_NOTIFICATIONS_GEN_SKELETON, GfGtkNotificationsGenSkeletonClass))
#define GF_GTK_NOTIFICATIONS_GEN_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_GTK_NOTIFICATIONS_GEN_SKELETON, GfGtkNotificationsGenSkeletonClass))
#define GF_IS_GTK_NOTIFICATIONS_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_GTK_NOTIFICATIONS_GEN_SKELETON))
#define GF_IS_GTK_NOTIFICATIONS_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_GTK_NOTIFICATIONS_GEN_SKELETON))

typedef struct _GfGtkNotificationsGenSkeleton GfGtkNotificationsGenSkeleton;
typedef struct _GfGtkNotificationsGenSkeletonClass GfGtkNotificationsGenSkeletonClass;
typedef struct _GfGtkNotificationsGenSkeletonPrivate GfGtkNotificationsGenSkeletonPrivate;

struct _GfGtkNotificationsGenSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GfGtkNotificationsGenSkeletonPrivate *priv;
};

struct _GfGtkNotificationsGenSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gf_gtk_notifications_gen_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfGtkNotificationsGenSkeleton, g_object_unref)
#endif

GfGtkNotificationsGen *gf_gtk_notifications_gen_skeleton_new (void);


G_END_DECLS

#endif /* __GF_GTK_NOTIFICATIONS_GEN_H__ */
