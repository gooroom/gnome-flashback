/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __GF_UPOWER_DEVICE_GEN_H__
#define __GF_UPOWER_DEVICE_GEN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.UPower.Device */

#define GF_TYPE_UPOWER_DEVICE_GEN (gf_upower_device_gen_get_type ())
#define GF_UPOWER_DEVICE_GEN(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_UPOWER_DEVICE_GEN, GfUPowerDeviceGen))
#define GF_IS_UPOWER_DEVICE_GEN(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_UPOWER_DEVICE_GEN))
#define GF_UPOWER_DEVICE_GEN_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GF_TYPE_UPOWER_DEVICE_GEN, GfUPowerDeviceGenIface))

struct _GfUPowerDeviceGen;
typedef struct _GfUPowerDeviceGen GfUPowerDeviceGen;
typedef struct _GfUPowerDeviceGenIface GfUPowerDeviceGenIface;

struct _GfUPowerDeviceGenIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get_history) (
    GfUPowerDeviceGen *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_type,
    guint arg_timespan,
    guint arg_resolution);

  gboolean (*handle_get_statistics) (
    GfUPowerDeviceGen *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_type);

  gboolean (*handle_refresh) (
    GfUPowerDeviceGen *object,
    GDBusMethodInvocation *invocation);

  gdouble  (*get_capacity) (GfUPowerDeviceGen *object);

  gdouble  (*get_energy) (GfUPowerDeviceGen *object);

  gdouble  (*get_energy_empty) (GfUPowerDeviceGen *object);

  gdouble  (*get_energy_full) (GfUPowerDeviceGen *object);

  gdouble  (*get_energy_full_design) (GfUPowerDeviceGen *object);

  gdouble  (*get_energy_rate) (GfUPowerDeviceGen *object);

  gboolean  (*get_has_history) (GfUPowerDeviceGen *object);

  gboolean  (*get_has_statistics) (GfUPowerDeviceGen *object);

  const gchar * (*get_icon_name) (GfUPowerDeviceGen *object);

  gboolean  (*get_is_present) (GfUPowerDeviceGen *object);

  gboolean  (*get_is_rechargeable) (GfUPowerDeviceGen *object);

  gdouble  (*get_luminosity) (GfUPowerDeviceGen *object);

  const gchar * (*get_model) (GfUPowerDeviceGen *object);

  const gchar * (*get_native_path) (GfUPowerDeviceGen *object);

  gboolean  (*get_online) (GfUPowerDeviceGen *object);

  gdouble  (*get_percentage) (GfUPowerDeviceGen *object);

  gboolean  (*get_power_supply) (GfUPowerDeviceGen *object);

  const gchar * (*get_serial) (GfUPowerDeviceGen *object);

  guint  (*get_state) (GfUPowerDeviceGen *object);

  guint  (*get_technology) (GfUPowerDeviceGen *object);

  gdouble  (*get_temperature) (GfUPowerDeviceGen *object);

  gint64  (*get_time_to_empty) (GfUPowerDeviceGen *object);

  gint64  (*get_time_to_full) (GfUPowerDeviceGen *object);

  guint  (*get_type_) (GfUPowerDeviceGen *object);

  guint64  (*get_update_time) (GfUPowerDeviceGen *object);

  const gchar * (*get_vendor) (GfUPowerDeviceGen *object);

  gdouble  (*get_voltage) (GfUPowerDeviceGen *object);

  guint  (*get_warning_level) (GfUPowerDeviceGen *object);

};

GType gf_upower_device_gen_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gf_upower_device_gen_interface_info (void);
guint gf_upower_device_gen_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gf_upower_device_gen_complete_refresh (
    GfUPowerDeviceGen *object,
    GDBusMethodInvocation *invocation);

void gf_upower_device_gen_complete_get_history (
    GfUPowerDeviceGen *object,
    GDBusMethodInvocation *invocation,
    GVariant *data);

void gf_upower_device_gen_complete_get_statistics (
    GfUPowerDeviceGen *object,
    GDBusMethodInvocation *invocation,
    GVariant *data);



/* D-Bus method calls: */
void gf_upower_device_gen_call_refresh (
    GfUPowerDeviceGen *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_upower_device_gen_call_refresh_finish (
    GfUPowerDeviceGen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_upower_device_gen_call_refresh_sync (
    GfUPowerDeviceGen *proxy,
    GCancellable *cancellable,
    GError **error);

void gf_upower_device_gen_call_get_history (
    GfUPowerDeviceGen *proxy,
    const gchar *arg_type,
    guint arg_timespan,
    guint arg_resolution,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_upower_device_gen_call_get_history_finish (
    GfUPowerDeviceGen *proxy,
    GVariant **out_data,
    GAsyncResult *res,
    GError **error);

gboolean gf_upower_device_gen_call_get_history_sync (
    GfUPowerDeviceGen *proxy,
    const gchar *arg_type,
    guint arg_timespan,
    guint arg_resolution,
    GVariant **out_data,
    GCancellable *cancellable,
    GError **error);

void gf_upower_device_gen_call_get_statistics (
    GfUPowerDeviceGen *proxy,
    const gchar *arg_type,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_upower_device_gen_call_get_statistics_finish (
    GfUPowerDeviceGen *proxy,
    GVariant **out_data,
    GAsyncResult *res,
    GError **error);

gboolean gf_upower_device_gen_call_get_statistics_sync (
    GfUPowerDeviceGen *proxy,
    const gchar *arg_type,
    GVariant **out_data,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *gf_upower_device_gen_get_native_path (GfUPowerDeviceGen *object);
gchar *gf_upower_device_gen_dup_native_path (GfUPowerDeviceGen *object);
void gf_upower_device_gen_set_native_path (GfUPowerDeviceGen *object, const gchar *value);

const gchar *gf_upower_device_gen_get_vendor (GfUPowerDeviceGen *object);
gchar *gf_upower_device_gen_dup_vendor (GfUPowerDeviceGen *object);
void gf_upower_device_gen_set_vendor (GfUPowerDeviceGen *object, const gchar *value);

const gchar *gf_upower_device_gen_get_model (GfUPowerDeviceGen *object);
gchar *gf_upower_device_gen_dup_model (GfUPowerDeviceGen *object);
void gf_upower_device_gen_set_model (GfUPowerDeviceGen *object, const gchar *value);

const gchar *gf_upower_device_gen_get_serial (GfUPowerDeviceGen *object);
gchar *gf_upower_device_gen_dup_serial (GfUPowerDeviceGen *object);
void gf_upower_device_gen_set_serial (GfUPowerDeviceGen *object, const gchar *value);

guint64 gf_upower_device_gen_get_update_time (GfUPowerDeviceGen *object);
void gf_upower_device_gen_set_update_time (GfUPowerDeviceGen *object, guint64 value);

guint gf_upower_device_gen_get_type_ (GfUPowerDeviceGen *object);
void gf_upower_device_gen_set_type_ (GfUPowerDeviceGen *object, guint value);

gboolean gf_upower_device_gen_get_power_supply (GfUPowerDeviceGen *object);
void gf_upower_device_gen_set_power_supply (GfUPowerDeviceGen *object, gboolean value);

gboolean gf_upower_device_gen_get_has_history (GfUPowerDeviceGen *object);
void gf_upower_device_gen_set_has_history (GfUPowerDeviceGen *object, gboolean value);

gboolean gf_upower_device_gen_get_has_statistics (GfUPowerDeviceGen *object);
void gf_upower_device_gen_set_has_statistics (GfUPowerDeviceGen *object, gboolean value);

gboolean gf_upower_device_gen_get_online (GfUPowerDeviceGen *object);
void gf_upower_device_gen_set_online (GfUPowerDeviceGen *object, gboolean value);

gdouble gf_upower_device_gen_get_energy (GfUPowerDeviceGen *object);
void gf_upower_device_gen_set_energy (GfUPowerDeviceGen *object, gdouble value);

gdouble gf_upower_device_gen_get_energy_empty (GfUPowerDeviceGen *object);
void gf_upower_device_gen_set_energy_empty (GfUPowerDeviceGen *object, gdouble value);

gdouble gf_upower_device_gen_get_energy_full (GfUPowerDeviceGen *object);
void gf_upower_device_gen_set_energy_full (GfUPowerDeviceGen *object, gdouble value);

gdouble gf_upower_device_gen_get_energy_full_design (GfUPowerDeviceGen *object);
void gf_upower_device_gen_set_energy_full_design (GfUPowerDeviceGen *object, gdouble value);

gdouble gf_upower_device_gen_get_energy_rate (GfUPowerDeviceGen *object);
void gf_upower_device_gen_set_energy_rate (GfUPowerDeviceGen *object, gdouble value);

gdouble gf_upower_device_gen_get_voltage (GfUPowerDeviceGen *object);
void gf_upower_device_gen_set_voltage (GfUPowerDeviceGen *object, gdouble value);

gdouble gf_upower_device_gen_get_luminosity (GfUPowerDeviceGen *object);
void gf_upower_device_gen_set_luminosity (GfUPowerDeviceGen *object, gdouble value);

gint64 gf_upower_device_gen_get_time_to_empty (GfUPowerDeviceGen *object);
void gf_upower_device_gen_set_time_to_empty (GfUPowerDeviceGen *object, gint64 value);

gint64 gf_upower_device_gen_get_time_to_full (GfUPowerDeviceGen *object);
void gf_upower_device_gen_set_time_to_full (GfUPowerDeviceGen *object, gint64 value);

gdouble gf_upower_device_gen_get_percentage (GfUPowerDeviceGen *object);
void gf_upower_device_gen_set_percentage (GfUPowerDeviceGen *object, gdouble value);

gdouble gf_upower_device_gen_get_temperature (GfUPowerDeviceGen *object);
void gf_upower_device_gen_set_temperature (GfUPowerDeviceGen *object, gdouble value);

gboolean gf_upower_device_gen_get_is_present (GfUPowerDeviceGen *object);
void gf_upower_device_gen_set_is_present (GfUPowerDeviceGen *object, gboolean value);

guint gf_upower_device_gen_get_state (GfUPowerDeviceGen *object);
void gf_upower_device_gen_set_state (GfUPowerDeviceGen *object, guint value);

gboolean gf_upower_device_gen_get_is_rechargeable (GfUPowerDeviceGen *object);
void gf_upower_device_gen_set_is_rechargeable (GfUPowerDeviceGen *object, gboolean value);

gdouble gf_upower_device_gen_get_capacity (GfUPowerDeviceGen *object);
void gf_upower_device_gen_set_capacity (GfUPowerDeviceGen *object, gdouble value);

guint gf_upower_device_gen_get_technology (GfUPowerDeviceGen *object);
void gf_upower_device_gen_set_technology (GfUPowerDeviceGen *object, guint value);

guint gf_upower_device_gen_get_warning_level (GfUPowerDeviceGen *object);
void gf_upower_device_gen_set_warning_level (GfUPowerDeviceGen *object, guint value);

const gchar *gf_upower_device_gen_get_icon_name (GfUPowerDeviceGen *object);
gchar *gf_upower_device_gen_dup_icon_name (GfUPowerDeviceGen *object);
void gf_upower_device_gen_set_icon_name (GfUPowerDeviceGen *object, const gchar *value);


/* ---- */

#define GF_TYPE_UPOWER_DEVICE_GEN_PROXY (gf_upower_device_gen_proxy_get_type ())
#define GF_UPOWER_DEVICE_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_UPOWER_DEVICE_GEN_PROXY, GfUPowerDeviceGenProxy))
#define GF_UPOWER_DEVICE_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_UPOWER_DEVICE_GEN_PROXY, GfUPowerDeviceGenProxyClass))
#define GF_UPOWER_DEVICE_GEN_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_UPOWER_DEVICE_GEN_PROXY, GfUPowerDeviceGenProxyClass))
#define GF_IS_UPOWER_DEVICE_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_UPOWER_DEVICE_GEN_PROXY))
#define GF_IS_UPOWER_DEVICE_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_UPOWER_DEVICE_GEN_PROXY))

typedef struct _GfUPowerDeviceGenProxy GfUPowerDeviceGenProxy;
typedef struct _GfUPowerDeviceGenProxyClass GfUPowerDeviceGenProxyClass;
typedef struct _GfUPowerDeviceGenProxyPrivate GfUPowerDeviceGenProxyPrivate;

struct _GfUPowerDeviceGenProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GfUPowerDeviceGenProxyPrivate *priv;
};

struct _GfUPowerDeviceGenProxyClass
{
  GDBusProxyClass parent_class;
};

GType gf_upower_device_gen_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfUPowerDeviceGenProxy, g_object_unref)
#endif

void gf_upower_device_gen_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfUPowerDeviceGen *gf_upower_device_gen_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GfUPowerDeviceGen *gf_upower_device_gen_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gf_upower_device_gen_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfUPowerDeviceGen *gf_upower_device_gen_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GfUPowerDeviceGen *gf_upower_device_gen_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GF_TYPE_UPOWER_DEVICE_GEN_SKELETON (gf_upower_device_gen_skeleton_get_type ())
#define GF_UPOWER_DEVICE_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_UPOWER_DEVICE_GEN_SKELETON, GfUPowerDeviceGenSkeleton))
#define GF_UPOWER_DEVICE_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_UPOWER_DEVICE_GEN_SKELETON, GfUPowerDeviceGenSkeletonClass))
#define GF_UPOWER_DEVICE_GEN_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_UPOWER_DEVICE_GEN_SKELETON, GfUPowerDeviceGenSkeletonClass))
#define GF_IS_UPOWER_DEVICE_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_UPOWER_DEVICE_GEN_SKELETON))
#define GF_IS_UPOWER_DEVICE_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_UPOWER_DEVICE_GEN_SKELETON))

typedef struct _GfUPowerDeviceGenSkeleton GfUPowerDeviceGenSkeleton;
typedef struct _GfUPowerDeviceGenSkeletonClass GfUPowerDeviceGenSkeletonClass;
typedef struct _GfUPowerDeviceGenSkeletonPrivate GfUPowerDeviceGenSkeletonPrivate;

struct _GfUPowerDeviceGenSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GfUPowerDeviceGenSkeletonPrivate *priv;
};

struct _GfUPowerDeviceGenSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gf_upower_device_gen_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfUPowerDeviceGenSkeleton, g_object_unref)
#endif

GfUPowerDeviceGen *gf_upower_device_gen_skeleton_new (void);


G_END_DECLS

#endif /* __GF_UPOWER_DEVICE_GEN_H__ */
