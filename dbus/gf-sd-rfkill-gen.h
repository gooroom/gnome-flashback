/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __GF_SD_RFKILL_GEN_H__
#define __GF_SD_RFKILL_GEN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.SettingsDaemon.Rfkill */

#define GF_TYPE_SD_RFKILL_GEN (gf_sd_rfkill_gen_get_type ())
#define GF_SD_RFKILL_GEN(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_SD_RFKILL_GEN, GfSdRfkillGen))
#define GF_IS_SD_RFKILL_GEN(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_SD_RFKILL_GEN))
#define GF_SD_RFKILL_GEN_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GF_TYPE_SD_RFKILL_GEN, GfSdRfkillGenIface))

struct _GfSdRfkillGen;
typedef struct _GfSdRfkillGen GfSdRfkillGen;
typedef struct _GfSdRfkillGenIface GfSdRfkillGenIface;

struct _GfSdRfkillGenIface
{
  GTypeInterface parent_iface;

  gboolean  (*get_airplane_mode) (GfSdRfkillGen *object);

  gboolean  (*get_bluetooth_airplane_mode) (GfSdRfkillGen *object);

  gboolean  (*get_bluetooth_hardware_airplane_mode) (GfSdRfkillGen *object);

  gboolean  (*get_bluetooth_has_airplane_mode) (GfSdRfkillGen *object);

  gboolean  (*get_hardware_airplane_mode) (GfSdRfkillGen *object);

  gboolean  (*get_has_airplane_mode) (GfSdRfkillGen *object);

  gboolean  (*get_should_show_airplane_mode) (GfSdRfkillGen *object);

};

GType gf_sd_rfkill_gen_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gf_sd_rfkill_gen_interface_info (void);
guint gf_sd_rfkill_gen_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
gboolean gf_sd_rfkill_gen_get_airplane_mode (GfSdRfkillGen *object);
void gf_sd_rfkill_gen_set_airplane_mode (GfSdRfkillGen *object, gboolean value);

gboolean gf_sd_rfkill_gen_get_hardware_airplane_mode (GfSdRfkillGen *object);
void gf_sd_rfkill_gen_set_hardware_airplane_mode (GfSdRfkillGen *object, gboolean value);

gboolean gf_sd_rfkill_gen_get_has_airplane_mode (GfSdRfkillGen *object);
void gf_sd_rfkill_gen_set_has_airplane_mode (GfSdRfkillGen *object, gboolean value);

gboolean gf_sd_rfkill_gen_get_should_show_airplane_mode (GfSdRfkillGen *object);
void gf_sd_rfkill_gen_set_should_show_airplane_mode (GfSdRfkillGen *object, gboolean value);

gboolean gf_sd_rfkill_gen_get_bluetooth_airplane_mode (GfSdRfkillGen *object);
void gf_sd_rfkill_gen_set_bluetooth_airplane_mode (GfSdRfkillGen *object, gboolean value);

gboolean gf_sd_rfkill_gen_get_bluetooth_hardware_airplane_mode (GfSdRfkillGen *object);
void gf_sd_rfkill_gen_set_bluetooth_hardware_airplane_mode (GfSdRfkillGen *object, gboolean value);

gboolean gf_sd_rfkill_gen_get_bluetooth_has_airplane_mode (GfSdRfkillGen *object);
void gf_sd_rfkill_gen_set_bluetooth_has_airplane_mode (GfSdRfkillGen *object, gboolean value);


/* ---- */

#define GF_TYPE_SD_RFKILL_GEN_PROXY (gf_sd_rfkill_gen_proxy_get_type ())
#define GF_SD_RFKILL_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_SD_RFKILL_GEN_PROXY, GfSdRfkillGenProxy))
#define GF_SD_RFKILL_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_SD_RFKILL_GEN_PROXY, GfSdRfkillGenProxyClass))
#define GF_SD_RFKILL_GEN_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_SD_RFKILL_GEN_PROXY, GfSdRfkillGenProxyClass))
#define GF_IS_SD_RFKILL_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_SD_RFKILL_GEN_PROXY))
#define GF_IS_SD_RFKILL_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_SD_RFKILL_GEN_PROXY))

typedef struct _GfSdRfkillGenProxy GfSdRfkillGenProxy;
typedef struct _GfSdRfkillGenProxyClass GfSdRfkillGenProxyClass;
typedef struct _GfSdRfkillGenProxyPrivate GfSdRfkillGenProxyPrivate;

struct _GfSdRfkillGenProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GfSdRfkillGenProxyPrivate *priv;
};

struct _GfSdRfkillGenProxyClass
{
  GDBusProxyClass parent_class;
};

GType gf_sd_rfkill_gen_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfSdRfkillGenProxy, g_object_unref)
#endif

void gf_sd_rfkill_gen_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfSdRfkillGen *gf_sd_rfkill_gen_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GfSdRfkillGen *gf_sd_rfkill_gen_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gf_sd_rfkill_gen_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfSdRfkillGen *gf_sd_rfkill_gen_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GfSdRfkillGen *gf_sd_rfkill_gen_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GF_TYPE_SD_RFKILL_GEN_SKELETON (gf_sd_rfkill_gen_skeleton_get_type ())
#define GF_SD_RFKILL_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_SD_RFKILL_GEN_SKELETON, GfSdRfkillGenSkeleton))
#define GF_SD_RFKILL_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_SD_RFKILL_GEN_SKELETON, GfSdRfkillGenSkeletonClass))
#define GF_SD_RFKILL_GEN_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_SD_RFKILL_GEN_SKELETON, GfSdRfkillGenSkeletonClass))
#define GF_IS_SD_RFKILL_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_SD_RFKILL_GEN_SKELETON))
#define GF_IS_SD_RFKILL_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_SD_RFKILL_GEN_SKELETON))

typedef struct _GfSdRfkillGenSkeleton GfSdRfkillGenSkeleton;
typedef struct _GfSdRfkillGenSkeletonClass GfSdRfkillGenSkeletonClass;
typedef struct _GfSdRfkillGenSkeletonPrivate GfSdRfkillGenSkeletonPrivate;

struct _GfSdRfkillGenSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GfSdRfkillGenSkeletonPrivate *priv;
};

struct _GfSdRfkillGenSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gf_sd_rfkill_gen_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfSdRfkillGenSkeleton, g_object_unref)
#endif

GfSdRfkillGen *gf_sd_rfkill_gen_skeleton_new (void);


G_END_DECLS

#endif /* __GF_SD_RFKILL_GEN_H__ */
