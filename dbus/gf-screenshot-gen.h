/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __GF_SCREENSHOT_GEN_H__
#define __GF_SCREENSHOT_GEN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.Shell.Screenshot */

#define GF_TYPE_SCREENSHOT_GEN (gf_screenshot_gen_get_type ())
#define GF_SCREENSHOT_GEN(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_SCREENSHOT_GEN, GfScreenshotGen))
#define GF_IS_SCREENSHOT_GEN(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_SCREENSHOT_GEN))
#define GF_SCREENSHOT_GEN_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GF_TYPE_SCREENSHOT_GEN, GfScreenshotGenIface))

struct _GfScreenshotGen;
typedef struct _GfScreenshotGen GfScreenshotGen;
typedef struct _GfScreenshotGenIface GfScreenshotGenIface;

struct _GfScreenshotGenIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_flash_area) (
    GfScreenshotGen *object,
    GDBusMethodInvocation *invocation,
    gint arg_x,
    gint arg_y,
    gint arg_width,
    gint arg_height);

  gboolean (*handle_screenshot) (
    GfScreenshotGen *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_include_cursor,
    gboolean arg_flash,
    const gchar *arg_filename);

  gboolean (*handle_screenshot_area) (
    GfScreenshotGen *object,
    GDBusMethodInvocation *invocation,
    gint arg_x,
    gint arg_y,
    gint arg_width,
    gint arg_height,
    gboolean arg_flash,
    const gchar *arg_filename);

  gboolean (*handle_screenshot_window) (
    GfScreenshotGen *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_include_frame,
    gboolean arg_include_cursor,
    gboolean arg_flash,
    const gchar *arg_filename);

  gboolean (*handle_select_area) (
    GfScreenshotGen *object,
    GDBusMethodInvocation *invocation);

};

GType gf_screenshot_gen_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gf_screenshot_gen_interface_info (void);
guint gf_screenshot_gen_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gf_screenshot_gen_complete_screenshot (
    GfScreenshotGen *object,
    GDBusMethodInvocation *invocation,
    gboolean success,
    const gchar *filename_used);

void gf_screenshot_gen_complete_screenshot_window (
    GfScreenshotGen *object,
    GDBusMethodInvocation *invocation,
    gboolean success,
    const gchar *filename_used);

void gf_screenshot_gen_complete_screenshot_area (
    GfScreenshotGen *object,
    GDBusMethodInvocation *invocation,
    gboolean success,
    const gchar *filename_used);

void gf_screenshot_gen_complete_flash_area (
    GfScreenshotGen *object,
    GDBusMethodInvocation *invocation);

void gf_screenshot_gen_complete_select_area (
    GfScreenshotGen *object,
    GDBusMethodInvocation *invocation,
    gint x,
    gint y,
    gint width,
    gint height);



/* D-Bus method calls: */
void gf_screenshot_gen_call_screenshot (
    GfScreenshotGen *proxy,
    gboolean arg_include_cursor,
    gboolean arg_flash,
    const gchar *arg_filename,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_screenshot_gen_call_screenshot_finish (
    GfScreenshotGen *proxy,
    gboolean *out_success,
    gchar **out_filename_used,
    GAsyncResult *res,
    GError **error);

gboolean gf_screenshot_gen_call_screenshot_sync (
    GfScreenshotGen *proxy,
    gboolean arg_include_cursor,
    gboolean arg_flash,
    const gchar *arg_filename,
    gboolean *out_success,
    gchar **out_filename_used,
    GCancellable *cancellable,
    GError **error);

void gf_screenshot_gen_call_screenshot_window (
    GfScreenshotGen *proxy,
    gboolean arg_include_frame,
    gboolean arg_include_cursor,
    gboolean arg_flash,
    const gchar *arg_filename,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_screenshot_gen_call_screenshot_window_finish (
    GfScreenshotGen *proxy,
    gboolean *out_success,
    gchar **out_filename_used,
    GAsyncResult *res,
    GError **error);

gboolean gf_screenshot_gen_call_screenshot_window_sync (
    GfScreenshotGen *proxy,
    gboolean arg_include_frame,
    gboolean arg_include_cursor,
    gboolean arg_flash,
    const gchar *arg_filename,
    gboolean *out_success,
    gchar **out_filename_used,
    GCancellable *cancellable,
    GError **error);

void gf_screenshot_gen_call_screenshot_area (
    GfScreenshotGen *proxy,
    gint arg_x,
    gint arg_y,
    gint arg_width,
    gint arg_height,
    gboolean arg_flash,
    const gchar *arg_filename,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_screenshot_gen_call_screenshot_area_finish (
    GfScreenshotGen *proxy,
    gboolean *out_success,
    gchar **out_filename_used,
    GAsyncResult *res,
    GError **error);

gboolean gf_screenshot_gen_call_screenshot_area_sync (
    GfScreenshotGen *proxy,
    gint arg_x,
    gint arg_y,
    gint arg_width,
    gint arg_height,
    gboolean arg_flash,
    const gchar *arg_filename,
    gboolean *out_success,
    gchar **out_filename_used,
    GCancellable *cancellable,
    GError **error);

void gf_screenshot_gen_call_flash_area (
    GfScreenshotGen *proxy,
    gint arg_x,
    gint arg_y,
    gint arg_width,
    gint arg_height,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_screenshot_gen_call_flash_area_finish (
    GfScreenshotGen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_screenshot_gen_call_flash_area_sync (
    GfScreenshotGen *proxy,
    gint arg_x,
    gint arg_y,
    gint arg_width,
    gint arg_height,
    GCancellable *cancellable,
    GError **error);

void gf_screenshot_gen_call_select_area (
    GfScreenshotGen *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_screenshot_gen_call_select_area_finish (
    GfScreenshotGen *proxy,
    gint *out_x,
    gint *out_y,
    gint *out_width,
    gint *out_height,
    GAsyncResult *res,
    GError **error);

gboolean gf_screenshot_gen_call_select_area_sync (
    GfScreenshotGen *proxy,
    gint *out_x,
    gint *out_y,
    gint *out_width,
    gint *out_height,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GF_TYPE_SCREENSHOT_GEN_PROXY (gf_screenshot_gen_proxy_get_type ())
#define GF_SCREENSHOT_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_SCREENSHOT_GEN_PROXY, GfScreenshotGenProxy))
#define GF_SCREENSHOT_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_SCREENSHOT_GEN_PROXY, GfScreenshotGenProxyClass))
#define GF_SCREENSHOT_GEN_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_SCREENSHOT_GEN_PROXY, GfScreenshotGenProxyClass))
#define GF_IS_SCREENSHOT_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_SCREENSHOT_GEN_PROXY))
#define GF_IS_SCREENSHOT_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_SCREENSHOT_GEN_PROXY))

typedef struct _GfScreenshotGenProxy GfScreenshotGenProxy;
typedef struct _GfScreenshotGenProxyClass GfScreenshotGenProxyClass;
typedef struct _GfScreenshotGenProxyPrivate GfScreenshotGenProxyPrivate;

struct _GfScreenshotGenProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GfScreenshotGenProxyPrivate *priv;
};

struct _GfScreenshotGenProxyClass
{
  GDBusProxyClass parent_class;
};

GType gf_screenshot_gen_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfScreenshotGenProxy, g_object_unref)
#endif

void gf_screenshot_gen_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfScreenshotGen *gf_screenshot_gen_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GfScreenshotGen *gf_screenshot_gen_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gf_screenshot_gen_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfScreenshotGen *gf_screenshot_gen_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GfScreenshotGen *gf_screenshot_gen_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GF_TYPE_SCREENSHOT_GEN_SKELETON (gf_screenshot_gen_skeleton_get_type ())
#define GF_SCREENSHOT_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_SCREENSHOT_GEN_SKELETON, GfScreenshotGenSkeleton))
#define GF_SCREENSHOT_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_SCREENSHOT_GEN_SKELETON, GfScreenshotGenSkeletonClass))
#define GF_SCREENSHOT_GEN_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_SCREENSHOT_GEN_SKELETON, GfScreenshotGenSkeletonClass))
#define GF_IS_SCREENSHOT_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_SCREENSHOT_GEN_SKELETON))
#define GF_IS_SCREENSHOT_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_SCREENSHOT_GEN_SKELETON))

typedef struct _GfScreenshotGenSkeleton GfScreenshotGenSkeleton;
typedef struct _GfScreenshotGenSkeletonClass GfScreenshotGenSkeletonClass;
typedef struct _GfScreenshotGenSkeletonPrivate GfScreenshotGenSkeletonPrivate;

struct _GfScreenshotGenSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GfScreenshotGenSkeletonPrivate *priv;
};

struct _GfScreenshotGenSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gf_screenshot_gen_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfScreenshotGenSkeleton, g_object_unref)
#endif

GfScreenshotGen *gf_screenshot_gen_skeleton_new (void);


G_END_DECLS

#endif /* __GF_SCREENSHOT_GEN_H__ */
