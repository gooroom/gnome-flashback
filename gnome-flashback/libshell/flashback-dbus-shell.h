/*
 * Generated by gdbus-codegen 2.59.0 from org.gnome.Shell.xml. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __FLASHBACK_DBUS_SHELL_H__
#define __FLASHBACK_DBUS_SHELL_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.Shell */

#define FLASHBACK_TYPE_DBUS_SHELL (flashback_dbus_shell_get_type ())
#define FLASHBACK_DBUS_SHELL(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), FLASHBACK_TYPE_DBUS_SHELL, FlashbackDBusShell))
#define FLASHBACK_IS_DBUS_SHELL(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), FLASHBACK_TYPE_DBUS_SHELL))
#define FLASHBACK_DBUS_SHELL_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), FLASHBACK_TYPE_DBUS_SHELL, FlashbackDBusShellIface))

struct _FlashbackDBusShell;
typedef struct _FlashbackDBusShell FlashbackDBusShell;
typedef struct _FlashbackDBusShellIface FlashbackDBusShellIface;

struct _FlashbackDBusShellIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_eval) (
    FlashbackDBusShell *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_script);

  gboolean (*handle_focus_app) (
    FlashbackDBusShell *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_id);

  gboolean (*handle_focus_search) (
    FlashbackDBusShell *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_grab_accelerator) (
    FlashbackDBusShell *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_accelerator,
    guint arg_flags);

  gboolean (*handle_grab_accelerators) (
    FlashbackDBusShell *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_accelerators);

  gboolean (*handle_hide_monitor_labels) (
    FlashbackDBusShell *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_show_applications) (
    FlashbackDBusShell *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_show_monitor_labels) (
    FlashbackDBusShell *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_params);

  gboolean (*handle_show_monitor_labels2) (
    FlashbackDBusShell *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_params);

  gboolean (*handle_show_osd) (
    FlashbackDBusShell *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_params);

  gboolean (*handle_ungrab_accelerator) (
    FlashbackDBusShell *object,
    GDBusMethodInvocation *invocation,
    guint arg_action);

  const gchar * (*get_mode) (FlashbackDBusShell *object);

  gboolean  (*get_overview_active) (FlashbackDBusShell *object);

  const gchar * (*get_shell_version) (FlashbackDBusShell *object);

  void (*accelerator_activated) (
    FlashbackDBusShell *object,
    guint arg_action,
    GVariant *arg_parameters);

};

GType flashback_dbus_shell_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *flashback_dbus_shell_interface_info (void);
guint flashback_dbus_shell_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void flashback_dbus_shell_complete_eval (
    FlashbackDBusShell *object,
    GDBusMethodInvocation *invocation,
    gboolean success,
    const gchar *result);

void flashback_dbus_shell_complete_focus_search (
    FlashbackDBusShell *object,
    GDBusMethodInvocation *invocation);

void flashback_dbus_shell_complete_show_osd (
    FlashbackDBusShell *object,
    GDBusMethodInvocation *invocation);

void flashback_dbus_shell_complete_show_monitor_labels (
    FlashbackDBusShell *object,
    GDBusMethodInvocation *invocation);

void flashback_dbus_shell_complete_show_monitor_labels2 (
    FlashbackDBusShell *object,
    GDBusMethodInvocation *invocation);

void flashback_dbus_shell_complete_hide_monitor_labels (
    FlashbackDBusShell *object,
    GDBusMethodInvocation *invocation);

void flashback_dbus_shell_complete_focus_app (
    FlashbackDBusShell *object,
    GDBusMethodInvocation *invocation);

void flashback_dbus_shell_complete_show_applications (
    FlashbackDBusShell *object,
    GDBusMethodInvocation *invocation);

void flashback_dbus_shell_complete_grab_accelerator (
    FlashbackDBusShell *object,
    GDBusMethodInvocation *invocation,
    guint action);

void flashback_dbus_shell_complete_grab_accelerators (
    FlashbackDBusShell *object,
    GDBusMethodInvocation *invocation,
    GVariant *actions);

void flashback_dbus_shell_complete_ungrab_accelerator (
    FlashbackDBusShell *object,
    GDBusMethodInvocation *invocation,
    gboolean success);



/* D-Bus signal emissions functions: */
void flashback_dbus_shell_emit_accelerator_activated (
    FlashbackDBusShell *object,
    guint arg_action,
    GVariant *arg_parameters);



/* D-Bus method calls: */
void flashback_dbus_shell_call_eval (
    FlashbackDBusShell *proxy,
    const gchar *arg_script,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean flashback_dbus_shell_call_eval_finish (
    FlashbackDBusShell *proxy,
    gboolean *out_success,
    gchar **out_result,
    GAsyncResult *res,
    GError **error);

gboolean flashback_dbus_shell_call_eval_sync (
    FlashbackDBusShell *proxy,
    const gchar *arg_script,
    gboolean *out_success,
    gchar **out_result,
    GCancellable *cancellable,
    GError **error);

void flashback_dbus_shell_call_focus_search (
    FlashbackDBusShell *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean flashback_dbus_shell_call_focus_search_finish (
    FlashbackDBusShell *proxy,
    GAsyncResult *res,
    GError **error);

gboolean flashback_dbus_shell_call_focus_search_sync (
    FlashbackDBusShell *proxy,
    GCancellable *cancellable,
    GError **error);

void flashback_dbus_shell_call_show_osd (
    FlashbackDBusShell *proxy,
    GVariant *arg_params,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean flashback_dbus_shell_call_show_osd_finish (
    FlashbackDBusShell *proxy,
    GAsyncResult *res,
    GError **error);

gboolean flashback_dbus_shell_call_show_osd_sync (
    FlashbackDBusShell *proxy,
    GVariant *arg_params,
    GCancellable *cancellable,
    GError **error);

void flashback_dbus_shell_call_show_monitor_labels (
    FlashbackDBusShell *proxy,
    GVariant *arg_params,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean flashback_dbus_shell_call_show_monitor_labels_finish (
    FlashbackDBusShell *proxy,
    GAsyncResult *res,
    GError **error);

gboolean flashback_dbus_shell_call_show_monitor_labels_sync (
    FlashbackDBusShell *proxy,
    GVariant *arg_params,
    GCancellable *cancellable,
    GError **error);

void flashback_dbus_shell_call_show_monitor_labels2 (
    FlashbackDBusShell *proxy,
    GVariant *arg_params,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean flashback_dbus_shell_call_show_monitor_labels2_finish (
    FlashbackDBusShell *proxy,
    GAsyncResult *res,
    GError **error);

gboolean flashback_dbus_shell_call_show_monitor_labels2_sync (
    FlashbackDBusShell *proxy,
    GVariant *arg_params,
    GCancellable *cancellable,
    GError **error);

void flashback_dbus_shell_call_hide_monitor_labels (
    FlashbackDBusShell *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean flashback_dbus_shell_call_hide_monitor_labels_finish (
    FlashbackDBusShell *proxy,
    GAsyncResult *res,
    GError **error);

gboolean flashback_dbus_shell_call_hide_monitor_labels_sync (
    FlashbackDBusShell *proxy,
    GCancellable *cancellable,
    GError **error);

void flashback_dbus_shell_call_focus_app (
    FlashbackDBusShell *proxy,
    const gchar *arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean flashback_dbus_shell_call_focus_app_finish (
    FlashbackDBusShell *proxy,
    GAsyncResult *res,
    GError **error);

gboolean flashback_dbus_shell_call_focus_app_sync (
    FlashbackDBusShell *proxy,
    const gchar *arg_id,
    GCancellable *cancellable,
    GError **error);

void flashback_dbus_shell_call_show_applications (
    FlashbackDBusShell *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean flashback_dbus_shell_call_show_applications_finish (
    FlashbackDBusShell *proxy,
    GAsyncResult *res,
    GError **error);

gboolean flashback_dbus_shell_call_show_applications_sync (
    FlashbackDBusShell *proxy,
    GCancellable *cancellable,
    GError **error);

void flashback_dbus_shell_call_grab_accelerator (
    FlashbackDBusShell *proxy,
    const gchar *arg_accelerator,
    guint arg_flags,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean flashback_dbus_shell_call_grab_accelerator_finish (
    FlashbackDBusShell *proxy,
    guint *out_action,
    GAsyncResult *res,
    GError **error);

gboolean flashback_dbus_shell_call_grab_accelerator_sync (
    FlashbackDBusShell *proxy,
    const gchar *arg_accelerator,
    guint arg_flags,
    guint *out_action,
    GCancellable *cancellable,
    GError **error);

void flashback_dbus_shell_call_grab_accelerators (
    FlashbackDBusShell *proxy,
    GVariant *arg_accelerators,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean flashback_dbus_shell_call_grab_accelerators_finish (
    FlashbackDBusShell *proxy,
    GVariant **out_actions,
    GAsyncResult *res,
    GError **error);

gboolean flashback_dbus_shell_call_grab_accelerators_sync (
    FlashbackDBusShell *proxy,
    GVariant *arg_accelerators,
    GVariant **out_actions,
    GCancellable *cancellable,
    GError **error);

void flashback_dbus_shell_call_ungrab_accelerator (
    FlashbackDBusShell *proxy,
    guint arg_action,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean flashback_dbus_shell_call_ungrab_accelerator_finish (
    FlashbackDBusShell *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean flashback_dbus_shell_call_ungrab_accelerator_sync (
    FlashbackDBusShell *proxy,
    guint arg_action,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *flashback_dbus_shell_get_mode (FlashbackDBusShell *object);
gchar *flashback_dbus_shell_dup_mode (FlashbackDBusShell *object);
void flashback_dbus_shell_set_mode (FlashbackDBusShell *object, const gchar *value);

gboolean flashback_dbus_shell_get_overview_active (FlashbackDBusShell *object);
void flashback_dbus_shell_set_overview_active (FlashbackDBusShell *object, gboolean value);

const gchar *flashback_dbus_shell_get_shell_version (FlashbackDBusShell *object);
gchar *flashback_dbus_shell_dup_shell_version (FlashbackDBusShell *object);
void flashback_dbus_shell_set_shell_version (FlashbackDBusShell *object, const gchar *value);


/* ---- */

#define FLASHBACK_TYPE_DBUS_SHELL_PROXY (flashback_dbus_shell_proxy_get_type ())
#define FLASHBACK_DBUS_SHELL_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), FLASHBACK_TYPE_DBUS_SHELL_PROXY, FlashbackDBusShellProxy))
#define FLASHBACK_DBUS_SHELL_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), FLASHBACK_TYPE_DBUS_SHELL_PROXY, FlashbackDBusShellProxyClass))
#define FLASHBACK_DBUS_SHELL_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), FLASHBACK_TYPE_DBUS_SHELL_PROXY, FlashbackDBusShellProxyClass))
#define FLASHBACK_IS_DBUS_SHELL_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), FLASHBACK_TYPE_DBUS_SHELL_PROXY))
#define FLASHBACK_IS_DBUS_SHELL_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), FLASHBACK_TYPE_DBUS_SHELL_PROXY))

typedef struct _FlashbackDBusShellProxy FlashbackDBusShellProxy;
typedef struct _FlashbackDBusShellProxyClass FlashbackDBusShellProxyClass;
typedef struct _FlashbackDBusShellProxyPrivate FlashbackDBusShellProxyPrivate;

struct _FlashbackDBusShellProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  FlashbackDBusShellProxyPrivate *priv;
};

struct _FlashbackDBusShellProxyClass
{
  GDBusProxyClass parent_class;
};

GType flashback_dbus_shell_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (FlashbackDBusShellProxy, g_object_unref)
#endif

void flashback_dbus_shell_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
FlashbackDBusShell *flashback_dbus_shell_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
FlashbackDBusShell *flashback_dbus_shell_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void flashback_dbus_shell_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
FlashbackDBusShell *flashback_dbus_shell_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
FlashbackDBusShell *flashback_dbus_shell_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define FLASHBACK_TYPE_DBUS_SHELL_SKELETON (flashback_dbus_shell_skeleton_get_type ())
#define FLASHBACK_DBUS_SHELL_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), FLASHBACK_TYPE_DBUS_SHELL_SKELETON, FlashbackDBusShellSkeleton))
#define FLASHBACK_DBUS_SHELL_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), FLASHBACK_TYPE_DBUS_SHELL_SKELETON, FlashbackDBusShellSkeletonClass))
#define FLASHBACK_DBUS_SHELL_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), FLASHBACK_TYPE_DBUS_SHELL_SKELETON, FlashbackDBusShellSkeletonClass))
#define FLASHBACK_IS_DBUS_SHELL_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), FLASHBACK_TYPE_DBUS_SHELL_SKELETON))
#define FLASHBACK_IS_DBUS_SHELL_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), FLASHBACK_TYPE_DBUS_SHELL_SKELETON))

typedef struct _FlashbackDBusShellSkeleton FlashbackDBusShellSkeleton;
typedef struct _FlashbackDBusShellSkeletonClass FlashbackDBusShellSkeletonClass;
typedef struct _FlashbackDBusShellSkeletonPrivate FlashbackDBusShellSkeletonPrivate;

struct _FlashbackDBusShellSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  FlashbackDBusShellSkeletonPrivate *priv;
};

struct _FlashbackDBusShellSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType flashback_dbus_shell_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (FlashbackDBusShellSkeleton, g_object_unref)
#endif

FlashbackDBusShell *flashback_dbus_shell_skeleton_new (void);


G_END_DECLS

#endif /* __FLASHBACK_DBUS_SHELL_H__ */
