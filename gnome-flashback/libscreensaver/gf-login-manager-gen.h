/*
 * Generated by gdbus-codegen 2.59.0 from org.freedesktop.login1.Manager.xml. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __GF_LOGIN_MANAGER_GEN_H__
#define __GF_LOGIN_MANAGER_GEN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.login1.Manager */

#define GF_TYPE_LOGIN_MANAGER_GEN (gf_login_manager_gen_get_type ())
#define GF_LOGIN_MANAGER_GEN(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_LOGIN_MANAGER_GEN, GfLoginManagerGen))
#define GF_IS_LOGIN_MANAGER_GEN(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_LOGIN_MANAGER_GEN))
#define GF_LOGIN_MANAGER_GEN_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GF_TYPE_LOGIN_MANAGER_GEN, GfLoginManagerGenIface))

struct _GfLoginManagerGen;
typedef struct _GfLoginManagerGen GfLoginManagerGen;
typedef struct _GfLoginManagerGenIface GfLoginManagerGenIface;

struct _GfLoginManagerGenIface
{
  GTypeInterface parent_iface;

  void (*prepare_for_sleep) (
    GfLoginManagerGen *object,
    gboolean arg_unnamed_arg0);

};

GType gf_login_manager_gen_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gf_login_manager_gen_interface_info (void);
guint gf_login_manager_gen_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus signal emissions functions: */
void gf_login_manager_gen_emit_prepare_for_sleep (
    GfLoginManagerGen *object,
    gboolean arg_unnamed_arg0);



/* ---- */

#define GF_TYPE_LOGIN_MANAGER_GEN_PROXY (gf_login_manager_gen_proxy_get_type ())
#define GF_LOGIN_MANAGER_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_LOGIN_MANAGER_GEN_PROXY, GfLoginManagerGenProxy))
#define GF_LOGIN_MANAGER_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_LOGIN_MANAGER_GEN_PROXY, GfLoginManagerGenProxyClass))
#define GF_LOGIN_MANAGER_GEN_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_LOGIN_MANAGER_GEN_PROXY, GfLoginManagerGenProxyClass))
#define GF_IS_LOGIN_MANAGER_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_LOGIN_MANAGER_GEN_PROXY))
#define GF_IS_LOGIN_MANAGER_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_LOGIN_MANAGER_GEN_PROXY))

typedef struct _GfLoginManagerGenProxy GfLoginManagerGenProxy;
typedef struct _GfLoginManagerGenProxyClass GfLoginManagerGenProxyClass;
typedef struct _GfLoginManagerGenProxyPrivate GfLoginManagerGenProxyPrivate;

struct _GfLoginManagerGenProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GfLoginManagerGenProxyPrivate *priv;
};

struct _GfLoginManagerGenProxyClass
{
  GDBusProxyClass parent_class;
};

GType gf_login_manager_gen_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfLoginManagerGenProxy, g_object_unref)
#endif

void gf_login_manager_gen_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfLoginManagerGen *gf_login_manager_gen_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GfLoginManagerGen *gf_login_manager_gen_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gf_login_manager_gen_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfLoginManagerGen *gf_login_manager_gen_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GfLoginManagerGen *gf_login_manager_gen_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GF_TYPE_LOGIN_MANAGER_GEN_SKELETON (gf_login_manager_gen_skeleton_get_type ())
#define GF_LOGIN_MANAGER_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_LOGIN_MANAGER_GEN_SKELETON, GfLoginManagerGenSkeleton))
#define GF_LOGIN_MANAGER_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_LOGIN_MANAGER_GEN_SKELETON, GfLoginManagerGenSkeletonClass))
#define GF_LOGIN_MANAGER_GEN_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_LOGIN_MANAGER_GEN_SKELETON, GfLoginManagerGenSkeletonClass))
#define GF_IS_LOGIN_MANAGER_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_LOGIN_MANAGER_GEN_SKELETON))
#define GF_IS_LOGIN_MANAGER_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_LOGIN_MANAGER_GEN_SKELETON))

typedef struct _GfLoginManagerGenSkeleton GfLoginManagerGenSkeleton;
typedef struct _GfLoginManagerGenSkeletonClass GfLoginManagerGenSkeletonClass;
typedef struct _GfLoginManagerGenSkeletonPrivate GfLoginManagerGenSkeletonPrivate;

struct _GfLoginManagerGenSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GfLoginManagerGenSkeletonPrivate *priv;
};

struct _GfLoginManagerGenSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gf_login_manager_gen_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfLoginManagerGenSkeleton, g_object_unref)
#endif

GfLoginManagerGen *gf_login_manager_gen_skeleton_new (void);


G_END_DECLS

#endif /* __GF_LOGIN_MANAGER_GEN_H__ */
