/*
 * Generated by gdbus-codegen 2.59.0 from org.freedesktop.login1.Session.xml. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __GF_LOGIN_SESSION_GEN_H__
#define __GF_LOGIN_SESSION_GEN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.login1.Session */

#define GF_TYPE_LOGIN_SESSION_GEN (gf_login_session_gen_get_type ())
#define GF_LOGIN_SESSION_GEN(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_LOGIN_SESSION_GEN, GfLoginSessionGen))
#define GF_IS_LOGIN_SESSION_GEN(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_LOGIN_SESSION_GEN))
#define GF_LOGIN_SESSION_GEN_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GF_TYPE_LOGIN_SESSION_GEN, GfLoginSessionGenIface))

struct _GfLoginSessionGen;
typedef struct _GfLoginSessionGen GfLoginSessionGen;
typedef struct _GfLoginSessionGenIface GfLoginSessionGenIface;

struct _GfLoginSessionGenIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_set_locked_hint) (
    GfLoginSessionGen *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_unnamed_arg0);

  gboolean  (*get_active) (GfLoginSessionGen *object);

  void (*lock) (
    GfLoginSessionGen *object);

  void (*unlock) (
    GfLoginSessionGen *object);

};

GType gf_login_session_gen_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gf_login_session_gen_interface_info (void);
guint gf_login_session_gen_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gf_login_session_gen_complete_set_locked_hint (
    GfLoginSessionGen *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void gf_login_session_gen_emit_lock (
    GfLoginSessionGen *object);

void gf_login_session_gen_emit_unlock (
    GfLoginSessionGen *object);



/* D-Bus method calls: */
void gf_login_session_gen_call_set_locked_hint (
    GfLoginSessionGen *proxy,
    gboolean arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_login_session_gen_call_set_locked_hint_finish (
    GfLoginSessionGen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_login_session_gen_call_set_locked_hint_sync (
    GfLoginSessionGen *proxy,
    gboolean arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
gboolean gf_login_session_gen_get_active (GfLoginSessionGen *object);
void gf_login_session_gen_set_active (GfLoginSessionGen *object, gboolean value);


/* ---- */

#define GF_TYPE_LOGIN_SESSION_GEN_PROXY (gf_login_session_gen_proxy_get_type ())
#define GF_LOGIN_SESSION_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_LOGIN_SESSION_GEN_PROXY, GfLoginSessionGenProxy))
#define GF_LOGIN_SESSION_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_LOGIN_SESSION_GEN_PROXY, GfLoginSessionGenProxyClass))
#define GF_LOGIN_SESSION_GEN_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_LOGIN_SESSION_GEN_PROXY, GfLoginSessionGenProxyClass))
#define GF_IS_LOGIN_SESSION_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_LOGIN_SESSION_GEN_PROXY))
#define GF_IS_LOGIN_SESSION_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_LOGIN_SESSION_GEN_PROXY))

typedef struct _GfLoginSessionGenProxy GfLoginSessionGenProxy;
typedef struct _GfLoginSessionGenProxyClass GfLoginSessionGenProxyClass;
typedef struct _GfLoginSessionGenProxyPrivate GfLoginSessionGenProxyPrivate;

struct _GfLoginSessionGenProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GfLoginSessionGenProxyPrivate *priv;
};

struct _GfLoginSessionGenProxyClass
{
  GDBusProxyClass parent_class;
};

GType gf_login_session_gen_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfLoginSessionGenProxy, g_object_unref)
#endif

void gf_login_session_gen_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfLoginSessionGen *gf_login_session_gen_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GfLoginSessionGen *gf_login_session_gen_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gf_login_session_gen_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfLoginSessionGen *gf_login_session_gen_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GfLoginSessionGen *gf_login_session_gen_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GF_TYPE_LOGIN_SESSION_GEN_SKELETON (gf_login_session_gen_skeleton_get_type ())
#define GF_LOGIN_SESSION_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_LOGIN_SESSION_GEN_SKELETON, GfLoginSessionGenSkeleton))
#define GF_LOGIN_SESSION_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_LOGIN_SESSION_GEN_SKELETON, GfLoginSessionGenSkeletonClass))
#define GF_LOGIN_SESSION_GEN_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_LOGIN_SESSION_GEN_SKELETON, GfLoginSessionGenSkeletonClass))
#define GF_IS_LOGIN_SESSION_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_LOGIN_SESSION_GEN_SKELETON))
#define GF_IS_LOGIN_SESSION_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_LOGIN_SESSION_GEN_SKELETON))

typedef struct _GfLoginSessionGenSkeleton GfLoginSessionGenSkeleton;
typedef struct _GfLoginSessionGenSkeletonClass GfLoginSessionGenSkeletonClass;
typedef struct _GfLoginSessionGenSkeletonPrivate GfLoginSessionGenSkeletonPrivate;

struct _GfLoginSessionGenSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GfLoginSessionGenSkeletonPrivate *priv;
};

struct _GfLoginSessionGenSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gf_login_session_gen_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfLoginSessionGenSkeleton, g_object_unref)
#endif

GfLoginSessionGen *gf_login_session_gen_skeleton_new (void);


G_END_DECLS

#endif /* __GF_LOGIN_SESSION_GEN_H__ */
