/*
 * Generated by gdbus-codegen 2.59.0 from org.gnome.ScreenSaver.xml. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __GF_SCREENSAVER_GEN_H__
#define __GF_SCREENSAVER_GEN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.ScreenSaver */

#define GF_TYPE_SCREENSAVER_GEN (gf_screensaver_gen_get_type ())
#define GF_SCREENSAVER_GEN(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_SCREENSAVER_GEN, GfScreensaverGen))
#define GF_IS_SCREENSAVER_GEN(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_SCREENSAVER_GEN))
#define GF_SCREENSAVER_GEN_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GF_TYPE_SCREENSAVER_GEN, GfScreensaverGenIface))

struct _GfScreensaverGen;
typedef struct _GfScreensaverGen GfScreensaverGen;
typedef struct _GfScreensaverGenIface GfScreensaverGenIface;

struct _GfScreensaverGenIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get_active) (
    GfScreensaverGen *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_active_time) (
    GfScreensaverGen *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_lock) (
    GfScreensaverGen *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_set_active) (
    GfScreensaverGen *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_value);

  gboolean (*handle_show_message) (
    GfScreensaverGen *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_summary,
    const gchar *arg_body,
    const gchar *arg_icon);

  gboolean (*handle_simulate_user_activity) (
    GfScreensaverGen *object,
    GDBusMethodInvocation *invocation);

  void (*active_changed) (
    GfScreensaverGen *object,
    gboolean arg_new_value);

  void (*wake_up_screen) (
    GfScreensaverGen *object);

};

GType gf_screensaver_gen_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gf_screensaver_gen_interface_info (void);
guint gf_screensaver_gen_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gf_screensaver_gen_complete_lock (
    GfScreensaverGen *object,
    GDBusMethodInvocation *invocation);

void gf_screensaver_gen_complete_get_active (
    GfScreensaverGen *object,
    GDBusMethodInvocation *invocation,
    gboolean active);

void gf_screensaver_gen_complete_get_active_time (
    GfScreensaverGen *object,
    GDBusMethodInvocation *invocation,
    guint value);

void gf_screensaver_gen_complete_set_active (
    GfScreensaverGen *object,
    GDBusMethodInvocation *invocation);

void gf_screensaver_gen_complete_show_message (
    GfScreensaverGen *object,
    GDBusMethodInvocation *invocation);

void gf_screensaver_gen_complete_simulate_user_activity (
    GfScreensaverGen *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void gf_screensaver_gen_emit_active_changed (
    GfScreensaverGen *object,
    gboolean arg_new_value);

void gf_screensaver_gen_emit_wake_up_screen (
    GfScreensaverGen *object);



/* D-Bus method calls: */
void gf_screensaver_gen_call_lock (
    GfScreensaverGen *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_screensaver_gen_call_lock_finish (
    GfScreensaverGen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_screensaver_gen_call_lock_sync (
    GfScreensaverGen *proxy,
    GCancellable *cancellable,
    GError **error);

void gf_screensaver_gen_call_get_active (
    GfScreensaverGen *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_screensaver_gen_call_get_active_finish (
    GfScreensaverGen *proxy,
    gboolean *out_active,
    GAsyncResult *res,
    GError **error);

gboolean gf_screensaver_gen_call_get_active_sync (
    GfScreensaverGen *proxy,
    gboolean *out_active,
    GCancellable *cancellable,
    GError **error);

void gf_screensaver_gen_call_get_active_time (
    GfScreensaverGen *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_screensaver_gen_call_get_active_time_finish (
    GfScreensaverGen *proxy,
    guint *out_value,
    GAsyncResult *res,
    GError **error);

gboolean gf_screensaver_gen_call_get_active_time_sync (
    GfScreensaverGen *proxy,
    guint *out_value,
    GCancellable *cancellable,
    GError **error);

void gf_screensaver_gen_call_set_active (
    GfScreensaverGen *proxy,
    gboolean arg_value,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_screensaver_gen_call_set_active_finish (
    GfScreensaverGen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_screensaver_gen_call_set_active_sync (
    GfScreensaverGen *proxy,
    gboolean arg_value,
    GCancellable *cancellable,
    GError **error);

void gf_screensaver_gen_call_show_message (
    GfScreensaverGen *proxy,
    const gchar *arg_summary,
    const gchar *arg_body,
    const gchar *arg_icon,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_screensaver_gen_call_show_message_finish (
    GfScreensaverGen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_screensaver_gen_call_show_message_sync (
    GfScreensaverGen *proxy,
    const gchar *arg_summary,
    const gchar *arg_body,
    const gchar *arg_icon,
    GCancellable *cancellable,
    GError **error);

void gf_screensaver_gen_call_simulate_user_activity (
    GfScreensaverGen *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_screensaver_gen_call_simulate_user_activity_finish (
    GfScreensaverGen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_screensaver_gen_call_simulate_user_activity_sync (
    GfScreensaverGen *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GF_TYPE_SCREENSAVER_GEN_PROXY (gf_screensaver_gen_proxy_get_type ())
#define GF_SCREENSAVER_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_SCREENSAVER_GEN_PROXY, GfScreensaverGenProxy))
#define GF_SCREENSAVER_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_SCREENSAVER_GEN_PROXY, GfScreensaverGenProxyClass))
#define GF_SCREENSAVER_GEN_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_SCREENSAVER_GEN_PROXY, GfScreensaverGenProxyClass))
#define GF_IS_SCREENSAVER_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_SCREENSAVER_GEN_PROXY))
#define GF_IS_SCREENSAVER_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_SCREENSAVER_GEN_PROXY))

typedef struct _GfScreensaverGenProxy GfScreensaverGenProxy;
typedef struct _GfScreensaverGenProxyClass GfScreensaverGenProxyClass;
typedef struct _GfScreensaverGenProxyPrivate GfScreensaverGenProxyPrivate;

struct _GfScreensaverGenProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GfScreensaverGenProxyPrivate *priv;
};

struct _GfScreensaverGenProxyClass
{
  GDBusProxyClass parent_class;
};

GType gf_screensaver_gen_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfScreensaverGenProxy, g_object_unref)
#endif

void gf_screensaver_gen_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfScreensaverGen *gf_screensaver_gen_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GfScreensaverGen *gf_screensaver_gen_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gf_screensaver_gen_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfScreensaverGen *gf_screensaver_gen_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GfScreensaverGen *gf_screensaver_gen_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GF_TYPE_SCREENSAVER_GEN_SKELETON (gf_screensaver_gen_skeleton_get_type ())
#define GF_SCREENSAVER_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_SCREENSAVER_GEN_SKELETON, GfScreensaverGenSkeleton))
#define GF_SCREENSAVER_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_SCREENSAVER_GEN_SKELETON, GfScreensaverGenSkeletonClass))
#define GF_SCREENSAVER_GEN_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_SCREENSAVER_GEN_SKELETON, GfScreensaverGenSkeletonClass))
#define GF_IS_SCREENSAVER_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_SCREENSAVER_GEN_SKELETON))
#define GF_IS_SCREENSAVER_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_SCREENSAVER_GEN_SKELETON))

typedef struct _GfScreensaverGenSkeleton GfScreensaverGenSkeleton;
typedef struct _GfScreensaverGenSkeletonClass GfScreensaverGenSkeletonClass;
typedef struct _GfScreensaverGenSkeletonPrivate GfScreensaverGenSkeletonPrivate;

struct _GfScreensaverGenSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GfScreensaverGenSkeletonPrivate *priv;
};

struct _GfScreensaverGenSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gf_screensaver_gen_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfScreensaverGenSkeleton, g_object_unref)
#endif

GfScreensaverGen *gf_screensaver_gen_skeleton_new (void);


G_END_DECLS

#endif /* __GF_SCREENSAVER_GEN_H__ */
