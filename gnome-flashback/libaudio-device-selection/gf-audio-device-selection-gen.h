/*
 * Generated by gdbus-codegen 2.59.0 from org.gnome.Shell.AudioDeviceSelection.xml. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __GF_AUDIO_DEVICE_SELECTION_GEN_H__
#define __GF_AUDIO_DEVICE_SELECTION_GEN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.Shell.AudioDeviceSelection */

#define GF_TYPE_AUDIO_DEVICE_SELECTION_GEN (gf_audio_device_selection_gen_get_type ())
#define GF_AUDIO_DEVICE_SELECTION_GEN(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_AUDIO_DEVICE_SELECTION_GEN, GfAudioDeviceSelectionGen))
#define GF_IS_AUDIO_DEVICE_SELECTION_GEN(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_AUDIO_DEVICE_SELECTION_GEN))
#define GF_AUDIO_DEVICE_SELECTION_GEN_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GF_TYPE_AUDIO_DEVICE_SELECTION_GEN, GfAudioDeviceSelectionGenIface))

struct _GfAudioDeviceSelectionGen;
typedef struct _GfAudioDeviceSelectionGen GfAudioDeviceSelectionGen;
typedef struct _GfAudioDeviceSelectionGenIface GfAudioDeviceSelectionGenIface;

struct _GfAudioDeviceSelectionGenIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_close) (
    GfAudioDeviceSelectionGen *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_open) (
    GfAudioDeviceSelectionGen *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_devices);

  void (*device_selected) (
    GfAudioDeviceSelectionGen *object,
    const gchar *arg_device);

};

GType gf_audio_device_selection_gen_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gf_audio_device_selection_gen_interface_info (void);
guint gf_audio_device_selection_gen_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gf_audio_device_selection_gen_complete_close (
    GfAudioDeviceSelectionGen *object,
    GDBusMethodInvocation *invocation);

void gf_audio_device_selection_gen_complete_open (
    GfAudioDeviceSelectionGen *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void gf_audio_device_selection_gen_emit_device_selected (
    GfAudioDeviceSelectionGen *object,
    const gchar *arg_device);



/* D-Bus method calls: */
void gf_audio_device_selection_gen_call_close (
    GfAudioDeviceSelectionGen *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_audio_device_selection_gen_call_close_finish (
    GfAudioDeviceSelectionGen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_audio_device_selection_gen_call_close_sync (
    GfAudioDeviceSelectionGen *proxy,
    GCancellable *cancellable,
    GError **error);

void gf_audio_device_selection_gen_call_open (
    GfAudioDeviceSelectionGen *proxy,
    const gchar *const *arg_devices,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_audio_device_selection_gen_call_open_finish (
    GfAudioDeviceSelectionGen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_audio_device_selection_gen_call_open_sync (
    GfAudioDeviceSelectionGen *proxy,
    const gchar *const *arg_devices,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GF_TYPE_AUDIO_DEVICE_SELECTION_GEN_PROXY (gf_audio_device_selection_gen_proxy_get_type ())
#define GF_AUDIO_DEVICE_SELECTION_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_AUDIO_DEVICE_SELECTION_GEN_PROXY, GfAudioDeviceSelectionGenProxy))
#define GF_AUDIO_DEVICE_SELECTION_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_AUDIO_DEVICE_SELECTION_GEN_PROXY, GfAudioDeviceSelectionGenProxyClass))
#define GF_AUDIO_DEVICE_SELECTION_GEN_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_AUDIO_DEVICE_SELECTION_GEN_PROXY, GfAudioDeviceSelectionGenProxyClass))
#define GF_IS_AUDIO_DEVICE_SELECTION_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_AUDIO_DEVICE_SELECTION_GEN_PROXY))
#define GF_IS_AUDIO_DEVICE_SELECTION_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_AUDIO_DEVICE_SELECTION_GEN_PROXY))

typedef struct _GfAudioDeviceSelectionGenProxy GfAudioDeviceSelectionGenProxy;
typedef struct _GfAudioDeviceSelectionGenProxyClass GfAudioDeviceSelectionGenProxyClass;
typedef struct _GfAudioDeviceSelectionGenProxyPrivate GfAudioDeviceSelectionGenProxyPrivate;

struct _GfAudioDeviceSelectionGenProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GfAudioDeviceSelectionGenProxyPrivate *priv;
};

struct _GfAudioDeviceSelectionGenProxyClass
{
  GDBusProxyClass parent_class;
};

GType gf_audio_device_selection_gen_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfAudioDeviceSelectionGenProxy, g_object_unref)
#endif

void gf_audio_device_selection_gen_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfAudioDeviceSelectionGen *gf_audio_device_selection_gen_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GfAudioDeviceSelectionGen *gf_audio_device_selection_gen_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gf_audio_device_selection_gen_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfAudioDeviceSelectionGen *gf_audio_device_selection_gen_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GfAudioDeviceSelectionGen *gf_audio_device_selection_gen_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GF_TYPE_AUDIO_DEVICE_SELECTION_GEN_SKELETON (gf_audio_device_selection_gen_skeleton_get_type ())
#define GF_AUDIO_DEVICE_SELECTION_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_AUDIO_DEVICE_SELECTION_GEN_SKELETON, GfAudioDeviceSelectionGenSkeleton))
#define GF_AUDIO_DEVICE_SELECTION_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_AUDIO_DEVICE_SELECTION_GEN_SKELETON, GfAudioDeviceSelectionGenSkeletonClass))
#define GF_AUDIO_DEVICE_SELECTION_GEN_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_AUDIO_DEVICE_SELECTION_GEN_SKELETON, GfAudioDeviceSelectionGenSkeletonClass))
#define GF_IS_AUDIO_DEVICE_SELECTION_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_AUDIO_DEVICE_SELECTION_GEN_SKELETON))
#define GF_IS_AUDIO_DEVICE_SELECTION_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_AUDIO_DEVICE_SELECTION_GEN_SKELETON))

typedef struct _GfAudioDeviceSelectionGenSkeleton GfAudioDeviceSelectionGenSkeleton;
typedef struct _GfAudioDeviceSelectionGenSkeletonClass GfAudioDeviceSelectionGenSkeletonClass;
typedef struct _GfAudioDeviceSelectionGenSkeletonPrivate GfAudioDeviceSelectionGenSkeletonPrivate;

struct _GfAudioDeviceSelectionGenSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GfAudioDeviceSelectionGenSkeletonPrivate *priv;
};

struct _GfAudioDeviceSelectionGenSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gf_audio_device_selection_gen_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfAudioDeviceSelectionGenSkeleton, g_object_unref)
#endif

GfAudioDeviceSelectionGen *gf_audio_device_selection_gen_skeleton_new (void);


G_END_DECLS

#endif /* __GF_AUDIO_DEVICE_SELECTION_GEN_H__ */
