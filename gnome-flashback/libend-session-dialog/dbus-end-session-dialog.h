/*
 * Generated by gdbus-codegen 2.59.0 from org.gnome.SessionManager.EndSessionDialog.xml. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __DBUS_END_SESSION_DIALOG_H__
#define __DBUS_END_SESSION_DIALOG_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.SessionManager.EndSessionDialog */

#define DBUS_TYPE_END_SESSION_DIALOG (dbus_end_session_dialog_get_type ())
#define DBUS_END_SESSION_DIALOG(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_END_SESSION_DIALOG, DBusEndSessionDialog))
#define DBUS_IS_END_SESSION_DIALOG(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_END_SESSION_DIALOG))
#define DBUS_END_SESSION_DIALOG_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), DBUS_TYPE_END_SESSION_DIALOG, DBusEndSessionDialogIface))

struct _DBusEndSessionDialog;
typedef struct _DBusEndSessionDialog DBusEndSessionDialog;
typedef struct _DBusEndSessionDialogIface DBusEndSessionDialogIface;

struct _DBusEndSessionDialogIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_open) (
    DBusEndSessionDialog *object,
    GDBusMethodInvocation *invocation,
    guint arg_type,
    guint arg_timestamp,
    guint arg_seconds_to_stay_open,
    const gchar *const *arg_inhibitor_object_paths);

  void (*canceled) (
    DBusEndSessionDialog *object);

  void (*closed) (
    DBusEndSessionDialog *object);

  void (*confirmed_hibernate) (
    DBusEndSessionDialog *object);

  void (*confirmed_hybrid_sleep) (
    DBusEndSessionDialog *object);

  void (*confirmed_logout) (
    DBusEndSessionDialog *object);

  void (*confirmed_reboot) (
    DBusEndSessionDialog *object);

  void (*confirmed_shutdown) (
    DBusEndSessionDialog *object);

  void (*confirmed_suspend) (
    DBusEndSessionDialog *object);

};

GType dbus_end_session_dialog_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *dbus_end_session_dialog_interface_info (void);
guint dbus_end_session_dialog_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void dbus_end_session_dialog_complete_open (
    DBusEndSessionDialog *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void dbus_end_session_dialog_emit_confirmed_logout (
    DBusEndSessionDialog *object);

void dbus_end_session_dialog_emit_confirmed_reboot (
    DBusEndSessionDialog *object);

void dbus_end_session_dialog_emit_confirmed_shutdown (
    DBusEndSessionDialog *object);

void dbus_end_session_dialog_emit_confirmed_hibernate (
    DBusEndSessionDialog *object);

void dbus_end_session_dialog_emit_confirmed_suspend (
    DBusEndSessionDialog *object);

void dbus_end_session_dialog_emit_confirmed_hybrid_sleep (
    DBusEndSessionDialog *object);

void dbus_end_session_dialog_emit_canceled (
    DBusEndSessionDialog *object);

void dbus_end_session_dialog_emit_closed (
    DBusEndSessionDialog *object);



/* D-Bus method calls: */
void dbus_end_session_dialog_call_open (
    DBusEndSessionDialog *proxy,
    guint arg_type,
    guint arg_timestamp,
    guint arg_seconds_to_stay_open,
    const gchar *const *arg_inhibitor_object_paths,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_end_session_dialog_call_open_finish (
    DBusEndSessionDialog *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_end_session_dialog_call_open_sync (
    DBusEndSessionDialog *proxy,
    guint arg_type,
    guint arg_timestamp,
    guint arg_seconds_to_stay_open,
    const gchar *const *arg_inhibitor_object_paths,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define DBUS_TYPE_END_SESSION_DIALOG_PROXY (dbus_end_session_dialog_proxy_get_type ())
#define DBUS_END_SESSION_DIALOG_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_END_SESSION_DIALOG_PROXY, DBusEndSessionDialogProxy))
#define DBUS_END_SESSION_DIALOG_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_TYPE_END_SESSION_DIALOG_PROXY, DBusEndSessionDialogProxyClass))
#define DBUS_END_SESSION_DIALOG_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_TYPE_END_SESSION_DIALOG_PROXY, DBusEndSessionDialogProxyClass))
#define DBUS_IS_END_SESSION_DIALOG_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_END_SESSION_DIALOG_PROXY))
#define DBUS_IS_END_SESSION_DIALOG_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_TYPE_END_SESSION_DIALOG_PROXY))

typedef struct _DBusEndSessionDialogProxy DBusEndSessionDialogProxy;
typedef struct _DBusEndSessionDialogProxyClass DBusEndSessionDialogProxyClass;
typedef struct _DBusEndSessionDialogProxyPrivate DBusEndSessionDialogProxyPrivate;

struct _DBusEndSessionDialogProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  DBusEndSessionDialogProxyPrivate *priv;
};

struct _DBusEndSessionDialogProxyClass
{
  GDBusProxyClass parent_class;
};

GType dbus_end_session_dialog_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DBusEndSessionDialogProxy, g_object_unref)
#endif

void dbus_end_session_dialog_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DBusEndSessionDialog *dbus_end_session_dialog_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
DBusEndSessionDialog *dbus_end_session_dialog_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void dbus_end_session_dialog_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DBusEndSessionDialog *dbus_end_session_dialog_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
DBusEndSessionDialog *dbus_end_session_dialog_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define DBUS_TYPE_END_SESSION_DIALOG_SKELETON (dbus_end_session_dialog_skeleton_get_type ())
#define DBUS_END_SESSION_DIALOG_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_END_SESSION_DIALOG_SKELETON, DBusEndSessionDialogSkeleton))
#define DBUS_END_SESSION_DIALOG_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_TYPE_END_SESSION_DIALOG_SKELETON, DBusEndSessionDialogSkeletonClass))
#define DBUS_END_SESSION_DIALOG_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_TYPE_END_SESSION_DIALOG_SKELETON, DBusEndSessionDialogSkeletonClass))
#define DBUS_IS_END_SESSION_DIALOG_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_END_SESSION_DIALOG_SKELETON))
#define DBUS_IS_END_SESSION_DIALOG_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_TYPE_END_SESSION_DIALOG_SKELETON))

typedef struct _DBusEndSessionDialogSkeleton DBusEndSessionDialogSkeleton;
typedef struct _DBusEndSessionDialogSkeletonClass DBusEndSessionDialogSkeletonClass;
typedef struct _DBusEndSessionDialogSkeletonPrivate DBusEndSessionDialogSkeletonPrivate;

struct _DBusEndSessionDialogSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  DBusEndSessionDialogSkeletonPrivate *priv;
};

struct _DBusEndSessionDialogSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType dbus_end_session_dialog_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DBusEndSessionDialogSkeleton, g_object_unref)
#endif

DBusEndSessionDialog *dbus_end_session_dialog_skeleton_new (void);


G_END_DECLS

#endif /* __DBUS_END_SESSION_DIALOG_H__ */
