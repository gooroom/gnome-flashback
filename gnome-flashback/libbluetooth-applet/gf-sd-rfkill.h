/*
 * Generated by gdbus-codegen 2.59.0 from org.gnome.SettingsDaemon.Rfkill.xml. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __GF_SD_RFKILL_H__
#define __GF_SD_RFKILL_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.SettingsDaemon.Rfkill */

#define GF_TYPE_SD_RFKILL (gf_sd_rfkill_get_type ())
#define GF_SD_RFKILL(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_SD_RFKILL, GfSdRfkill))
#define GF_IS_SD_RFKILL(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_SD_RFKILL))
#define GF_SD_RFKILL_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GF_TYPE_SD_RFKILL, GfSdRfkillIface))

struct _GfSdRfkill;
typedef struct _GfSdRfkill GfSdRfkill;
typedef struct _GfSdRfkillIface GfSdRfkillIface;

struct _GfSdRfkillIface
{
  GTypeInterface parent_iface;

  gboolean  (*get_airplane_mode) (GfSdRfkill *object);

  gboolean  (*get_bluetooth_airplane_mode) (GfSdRfkill *object);

  gboolean  (*get_bluetooth_hardware_airplane_mode) (GfSdRfkill *object);

  gboolean  (*get_bluetooth_has_airplane_mode) (GfSdRfkill *object);

  gboolean  (*get_hardware_airplane_mode) (GfSdRfkill *object);

  gboolean  (*get_has_airplane_mode) (GfSdRfkill *object);

  gboolean  (*get_should_show_airplane_mode) (GfSdRfkill *object);

};

GType gf_sd_rfkill_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gf_sd_rfkill_interface_info (void);
guint gf_sd_rfkill_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
gboolean gf_sd_rfkill_get_airplane_mode (GfSdRfkill *object);
void gf_sd_rfkill_set_airplane_mode (GfSdRfkill *object, gboolean value);

gboolean gf_sd_rfkill_get_hardware_airplane_mode (GfSdRfkill *object);
void gf_sd_rfkill_set_hardware_airplane_mode (GfSdRfkill *object, gboolean value);

gboolean gf_sd_rfkill_get_has_airplane_mode (GfSdRfkill *object);
void gf_sd_rfkill_set_has_airplane_mode (GfSdRfkill *object, gboolean value);

gboolean gf_sd_rfkill_get_should_show_airplane_mode (GfSdRfkill *object);
void gf_sd_rfkill_set_should_show_airplane_mode (GfSdRfkill *object, gboolean value);

gboolean gf_sd_rfkill_get_bluetooth_airplane_mode (GfSdRfkill *object);
void gf_sd_rfkill_set_bluetooth_airplane_mode (GfSdRfkill *object, gboolean value);

gboolean gf_sd_rfkill_get_bluetooth_hardware_airplane_mode (GfSdRfkill *object);
void gf_sd_rfkill_set_bluetooth_hardware_airplane_mode (GfSdRfkill *object, gboolean value);

gboolean gf_sd_rfkill_get_bluetooth_has_airplane_mode (GfSdRfkill *object);
void gf_sd_rfkill_set_bluetooth_has_airplane_mode (GfSdRfkill *object, gboolean value);


/* ---- */

#define GF_TYPE_SD_RFKILL_PROXY (gf_sd_rfkill_proxy_get_type ())
#define GF_SD_RFKILL_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_SD_RFKILL_PROXY, GfSdRfkillProxy))
#define GF_SD_RFKILL_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_SD_RFKILL_PROXY, GfSdRfkillProxyClass))
#define GF_SD_RFKILL_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_SD_RFKILL_PROXY, GfSdRfkillProxyClass))
#define GF_IS_SD_RFKILL_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_SD_RFKILL_PROXY))
#define GF_IS_SD_RFKILL_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_SD_RFKILL_PROXY))

typedef struct _GfSdRfkillProxy GfSdRfkillProxy;
typedef struct _GfSdRfkillProxyClass GfSdRfkillProxyClass;
typedef struct _GfSdRfkillProxyPrivate GfSdRfkillProxyPrivate;

struct _GfSdRfkillProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GfSdRfkillProxyPrivate *priv;
};

struct _GfSdRfkillProxyClass
{
  GDBusProxyClass parent_class;
};

GType gf_sd_rfkill_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfSdRfkillProxy, g_object_unref)
#endif

void gf_sd_rfkill_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfSdRfkill *gf_sd_rfkill_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GfSdRfkill *gf_sd_rfkill_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gf_sd_rfkill_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfSdRfkill *gf_sd_rfkill_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GfSdRfkill *gf_sd_rfkill_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GF_TYPE_SD_RFKILL_SKELETON (gf_sd_rfkill_skeleton_get_type ())
#define GF_SD_RFKILL_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_SD_RFKILL_SKELETON, GfSdRfkillSkeleton))
#define GF_SD_RFKILL_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_SD_RFKILL_SKELETON, GfSdRfkillSkeletonClass))
#define GF_SD_RFKILL_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_SD_RFKILL_SKELETON, GfSdRfkillSkeletonClass))
#define GF_IS_SD_RFKILL_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_SD_RFKILL_SKELETON))
#define GF_IS_SD_RFKILL_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_SD_RFKILL_SKELETON))

typedef struct _GfSdRfkillSkeleton GfSdRfkillSkeleton;
typedef struct _GfSdRfkillSkeletonClass GfSdRfkillSkeletonClass;
typedef struct _GfSdRfkillSkeletonPrivate GfSdRfkillSkeletonPrivate;

struct _GfSdRfkillSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GfSdRfkillSkeletonPrivate *priv;
};

struct _GfSdRfkillSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gf_sd_rfkill_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfSdRfkillSkeleton, g_object_unref)
#endif

GfSdRfkill *gf_sd_rfkill_skeleton_new (void);


G_END_DECLS

#endif /* __GF_SD_RFKILL_H__ */
