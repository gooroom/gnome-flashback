/*
 * Generated by gdbus-codegen 2.59.0 from org.freedesktop.DBus.xml. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __GF_FD_DBUS_GEN_H__
#define __GF_FD_DBUS_GEN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus */

#define GF_TYPE_FD_DBUS_GEN (gf_fd_dbus_gen_get_type ())
#define GF_FD_DBUS_GEN(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_FD_DBUS_GEN, GfFdDBusGen))
#define GF_IS_FD_DBUS_GEN(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_FD_DBUS_GEN))
#define GF_FD_DBUS_GEN_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GF_TYPE_FD_DBUS_GEN, GfFdDBusGenIface))

struct _GfFdDBusGen;
typedef struct _GfFdDBusGen GfFdDBusGen;
typedef struct _GfFdDBusGenIface GfFdDBusGenIface;

struct _GfFdDBusGenIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_get_connection_unix_process_id) (
    GfFdDBusGen *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

};

GType gf_fd_dbus_gen_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gf_fd_dbus_gen_interface_info (void);
guint gf_fd_dbus_gen_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gf_fd_dbus_gen_complete_get_connection_unix_process_id (
    GfFdDBusGen *object,
    GDBusMethodInvocation *invocation,
    guint unnamed_arg1);



/* D-Bus method calls: */
void gf_fd_dbus_gen_call_get_connection_unix_process_id (
    GfFdDBusGen *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_fd_dbus_gen_call_get_connection_unix_process_id_finish (
    GfFdDBusGen *proxy,
    guint *out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean gf_fd_dbus_gen_call_get_connection_unix_process_id_sync (
    GfFdDBusGen *proxy,
    const gchar *arg_unnamed_arg0,
    guint *out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GF_TYPE_FD_DBUS_GEN_PROXY (gf_fd_dbus_gen_proxy_get_type ())
#define GF_FD_DBUS_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_FD_DBUS_GEN_PROXY, GfFdDBusGenProxy))
#define GF_FD_DBUS_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_FD_DBUS_GEN_PROXY, GfFdDBusGenProxyClass))
#define GF_FD_DBUS_GEN_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_FD_DBUS_GEN_PROXY, GfFdDBusGenProxyClass))
#define GF_IS_FD_DBUS_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_FD_DBUS_GEN_PROXY))
#define GF_IS_FD_DBUS_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_FD_DBUS_GEN_PROXY))

typedef struct _GfFdDBusGenProxy GfFdDBusGenProxy;
typedef struct _GfFdDBusGenProxyClass GfFdDBusGenProxyClass;
typedef struct _GfFdDBusGenProxyPrivate GfFdDBusGenProxyPrivate;

struct _GfFdDBusGenProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GfFdDBusGenProxyPrivate *priv;
};

struct _GfFdDBusGenProxyClass
{
  GDBusProxyClass parent_class;
};

GType gf_fd_dbus_gen_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfFdDBusGenProxy, g_object_unref)
#endif

void gf_fd_dbus_gen_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfFdDBusGen *gf_fd_dbus_gen_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GfFdDBusGen *gf_fd_dbus_gen_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gf_fd_dbus_gen_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfFdDBusGen *gf_fd_dbus_gen_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GfFdDBusGen *gf_fd_dbus_gen_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GF_TYPE_FD_DBUS_GEN_SKELETON (gf_fd_dbus_gen_skeleton_get_type ())
#define GF_FD_DBUS_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_FD_DBUS_GEN_SKELETON, GfFdDBusGenSkeleton))
#define GF_FD_DBUS_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_FD_DBUS_GEN_SKELETON, GfFdDBusGenSkeletonClass))
#define GF_FD_DBUS_GEN_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_FD_DBUS_GEN_SKELETON, GfFdDBusGenSkeletonClass))
#define GF_IS_FD_DBUS_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_FD_DBUS_GEN_SKELETON))
#define GF_IS_FD_DBUS_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_FD_DBUS_GEN_SKELETON))

typedef struct _GfFdDBusGenSkeleton GfFdDBusGenSkeleton;
typedef struct _GfFdDBusGenSkeletonClass GfFdDBusGenSkeletonClass;
typedef struct _GfFdDBusGenSkeletonPrivate GfFdDBusGenSkeletonPrivate;

struct _GfFdDBusGenSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GfFdDBusGenSkeletonPrivate *priv;
};

struct _GfFdDBusGenSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gf_fd_dbus_gen_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfFdDBusGenSkeleton, g_object_unref)
#endif

GfFdDBusGen *gf_fd_dbus_gen_skeleton_new (void);


G_END_DECLS

#endif /* __GF_FD_DBUS_GEN_H__ */
