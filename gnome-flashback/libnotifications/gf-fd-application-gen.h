/*
 * Generated by gdbus-codegen 2.59.0 from org.freedesktop.Application.xml. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __GF_FD_APPLICATION_GEN_H__
#define __GF_FD_APPLICATION_GEN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.Application */

#define GF_TYPE_FD_APPLICATION_GEN (gf_fd_application_gen_get_type ())
#define GF_FD_APPLICATION_GEN(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_FD_APPLICATION_GEN, GfFdApplicationGen))
#define GF_IS_FD_APPLICATION_GEN(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_FD_APPLICATION_GEN))
#define GF_FD_APPLICATION_GEN_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GF_TYPE_FD_APPLICATION_GEN, GfFdApplicationGenIface))

struct _GfFdApplicationGen;
typedef struct _GfFdApplicationGen GfFdApplicationGen;
typedef struct _GfFdApplicationGenIface GfFdApplicationGenIface;

struct _GfFdApplicationGenIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_activate) (
    GfFdApplicationGen *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_unnamed_arg0);

  gboolean (*handle_activate_action) (
    GfFdApplicationGen *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1,
    GVariant *arg_unnamed_arg2);

};

GType gf_fd_application_gen_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gf_fd_application_gen_interface_info (void);
guint gf_fd_application_gen_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gf_fd_application_gen_complete_activate (
    GfFdApplicationGen *object,
    GDBusMethodInvocation *invocation);

void gf_fd_application_gen_complete_activate_action (
    GfFdApplicationGen *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void gf_fd_application_gen_call_activate (
    GfFdApplicationGen *proxy,
    GVariant *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_fd_application_gen_call_activate_finish (
    GfFdApplicationGen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_fd_application_gen_call_activate_sync (
    GfFdApplicationGen *proxy,
    GVariant *arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void gf_fd_application_gen_call_activate_action (
    GfFdApplicationGen *proxy,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1,
    GVariant *arg_unnamed_arg2,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_fd_application_gen_call_activate_action_finish (
    GfFdApplicationGen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_fd_application_gen_call_activate_action_sync (
    GfFdApplicationGen *proxy,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1,
    GVariant *arg_unnamed_arg2,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GF_TYPE_FD_APPLICATION_GEN_PROXY (gf_fd_application_gen_proxy_get_type ())
#define GF_FD_APPLICATION_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_FD_APPLICATION_GEN_PROXY, GfFdApplicationGenProxy))
#define GF_FD_APPLICATION_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_FD_APPLICATION_GEN_PROXY, GfFdApplicationGenProxyClass))
#define GF_FD_APPLICATION_GEN_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_FD_APPLICATION_GEN_PROXY, GfFdApplicationGenProxyClass))
#define GF_IS_FD_APPLICATION_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_FD_APPLICATION_GEN_PROXY))
#define GF_IS_FD_APPLICATION_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_FD_APPLICATION_GEN_PROXY))

typedef struct _GfFdApplicationGenProxy GfFdApplicationGenProxy;
typedef struct _GfFdApplicationGenProxyClass GfFdApplicationGenProxyClass;
typedef struct _GfFdApplicationGenProxyPrivate GfFdApplicationGenProxyPrivate;

struct _GfFdApplicationGenProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GfFdApplicationGenProxyPrivate *priv;
};

struct _GfFdApplicationGenProxyClass
{
  GDBusProxyClass parent_class;
};

GType gf_fd_application_gen_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfFdApplicationGenProxy, g_object_unref)
#endif

void gf_fd_application_gen_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfFdApplicationGen *gf_fd_application_gen_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GfFdApplicationGen *gf_fd_application_gen_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gf_fd_application_gen_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfFdApplicationGen *gf_fd_application_gen_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GfFdApplicationGen *gf_fd_application_gen_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GF_TYPE_FD_APPLICATION_GEN_SKELETON (gf_fd_application_gen_skeleton_get_type ())
#define GF_FD_APPLICATION_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_FD_APPLICATION_GEN_SKELETON, GfFdApplicationGenSkeleton))
#define GF_FD_APPLICATION_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_FD_APPLICATION_GEN_SKELETON, GfFdApplicationGenSkeletonClass))
#define GF_FD_APPLICATION_GEN_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_FD_APPLICATION_GEN_SKELETON, GfFdApplicationGenSkeletonClass))
#define GF_IS_FD_APPLICATION_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_FD_APPLICATION_GEN_SKELETON))
#define GF_IS_FD_APPLICATION_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_FD_APPLICATION_GEN_SKELETON))

typedef struct _GfFdApplicationGenSkeleton GfFdApplicationGenSkeleton;
typedef struct _GfFdApplicationGenSkeletonClass GfFdApplicationGenSkeletonClass;
typedef struct _GfFdApplicationGenSkeletonPrivate GfFdApplicationGenSkeletonPrivate;

struct _GfFdApplicationGenSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GfFdApplicationGenSkeletonPrivate *priv;
};

struct _GfFdApplicationGenSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gf_fd_application_gen_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfFdApplicationGenSkeleton, g_object_unref)
#endif

GfFdApplicationGen *gf_fd_application_gen_skeleton_new (void);


G_END_DECLS

#endif /* __GF_FD_APPLICATION_GEN_H__ */
