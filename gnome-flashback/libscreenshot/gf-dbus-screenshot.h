/*
 * Generated by gdbus-codegen 2.59.0 from org.gnome.Shell.Screenshot.xml. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __GF_DBUS_SCREENSHOT_H__
#define __GF_DBUS_SCREENSHOT_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.Shell.Screenshot */

#define GF_TYPE_DBUS_SCREENSHOT (gf_dbus_screenshot_get_type ())
#define GF_DBUS_SCREENSHOT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_DBUS_SCREENSHOT, GfDBusScreenshot))
#define GF_IS_DBUS_SCREENSHOT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_DBUS_SCREENSHOT))
#define GF_DBUS_SCREENSHOT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GF_TYPE_DBUS_SCREENSHOT, GfDBusScreenshotIface))

struct _GfDBusScreenshot;
typedef struct _GfDBusScreenshot GfDBusScreenshot;
typedef struct _GfDBusScreenshotIface GfDBusScreenshotIface;

struct _GfDBusScreenshotIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_flash_area) (
    GfDBusScreenshot *object,
    GDBusMethodInvocation *invocation,
    gint arg_x,
    gint arg_y,
    gint arg_width,
    gint arg_height);

  gboolean (*handle_screenshot) (
    GfDBusScreenshot *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_include_cursor,
    gboolean arg_flash,
    const gchar *arg_filename);

  gboolean (*handle_screenshot_area) (
    GfDBusScreenshot *object,
    GDBusMethodInvocation *invocation,
    gint arg_x,
    gint arg_y,
    gint arg_width,
    gint arg_height,
    gboolean arg_flash,
    const gchar *arg_filename);

  gboolean (*handle_screenshot_window) (
    GfDBusScreenshot *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_include_frame,
    gboolean arg_include_cursor,
    gboolean arg_flash,
    const gchar *arg_filename);

  gboolean (*handle_select_area) (
    GfDBusScreenshot *object,
    GDBusMethodInvocation *invocation);

};

GType gf_dbus_screenshot_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gf_dbus_screenshot_interface_info (void);
guint gf_dbus_screenshot_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gf_dbus_screenshot_complete_screenshot (
    GfDBusScreenshot *object,
    GDBusMethodInvocation *invocation,
    gboolean success,
    const gchar *filename_used);

void gf_dbus_screenshot_complete_screenshot_window (
    GfDBusScreenshot *object,
    GDBusMethodInvocation *invocation,
    gboolean success,
    const gchar *filename_used);

void gf_dbus_screenshot_complete_screenshot_area (
    GfDBusScreenshot *object,
    GDBusMethodInvocation *invocation,
    gboolean success,
    const gchar *filename_used);

void gf_dbus_screenshot_complete_flash_area (
    GfDBusScreenshot *object,
    GDBusMethodInvocation *invocation);

void gf_dbus_screenshot_complete_select_area (
    GfDBusScreenshot *object,
    GDBusMethodInvocation *invocation,
    gint x,
    gint y,
    gint width,
    gint height);



/* D-Bus method calls: */
void gf_dbus_screenshot_call_screenshot (
    GfDBusScreenshot *proxy,
    gboolean arg_include_cursor,
    gboolean arg_flash,
    const gchar *arg_filename,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_dbus_screenshot_call_screenshot_finish (
    GfDBusScreenshot *proxy,
    gboolean *out_success,
    gchar **out_filename_used,
    GAsyncResult *res,
    GError **error);

gboolean gf_dbus_screenshot_call_screenshot_sync (
    GfDBusScreenshot *proxy,
    gboolean arg_include_cursor,
    gboolean arg_flash,
    const gchar *arg_filename,
    gboolean *out_success,
    gchar **out_filename_used,
    GCancellable *cancellable,
    GError **error);

void gf_dbus_screenshot_call_screenshot_window (
    GfDBusScreenshot *proxy,
    gboolean arg_include_frame,
    gboolean arg_include_cursor,
    gboolean arg_flash,
    const gchar *arg_filename,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_dbus_screenshot_call_screenshot_window_finish (
    GfDBusScreenshot *proxy,
    gboolean *out_success,
    gchar **out_filename_used,
    GAsyncResult *res,
    GError **error);

gboolean gf_dbus_screenshot_call_screenshot_window_sync (
    GfDBusScreenshot *proxy,
    gboolean arg_include_frame,
    gboolean arg_include_cursor,
    gboolean arg_flash,
    const gchar *arg_filename,
    gboolean *out_success,
    gchar **out_filename_used,
    GCancellable *cancellable,
    GError **error);

void gf_dbus_screenshot_call_screenshot_area (
    GfDBusScreenshot *proxy,
    gint arg_x,
    gint arg_y,
    gint arg_width,
    gint arg_height,
    gboolean arg_flash,
    const gchar *arg_filename,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_dbus_screenshot_call_screenshot_area_finish (
    GfDBusScreenshot *proxy,
    gboolean *out_success,
    gchar **out_filename_used,
    GAsyncResult *res,
    GError **error);

gboolean gf_dbus_screenshot_call_screenshot_area_sync (
    GfDBusScreenshot *proxy,
    gint arg_x,
    gint arg_y,
    gint arg_width,
    gint arg_height,
    gboolean arg_flash,
    const gchar *arg_filename,
    gboolean *out_success,
    gchar **out_filename_used,
    GCancellable *cancellable,
    GError **error);

void gf_dbus_screenshot_call_flash_area (
    GfDBusScreenshot *proxy,
    gint arg_x,
    gint arg_y,
    gint arg_width,
    gint arg_height,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_dbus_screenshot_call_flash_area_finish (
    GfDBusScreenshot *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_dbus_screenshot_call_flash_area_sync (
    GfDBusScreenshot *proxy,
    gint arg_x,
    gint arg_y,
    gint arg_width,
    gint arg_height,
    GCancellable *cancellable,
    GError **error);

void gf_dbus_screenshot_call_select_area (
    GfDBusScreenshot *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_dbus_screenshot_call_select_area_finish (
    GfDBusScreenshot *proxy,
    gint *out_x,
    gint *out_y,
    gint *out_width,
    gint *out_height,
    GAsyncResult *res,
    GError **error);

gboolean gf_dbus_screenshot_call_select_area_sync (
    GfDBusScreenshot *proxy,
    gint *out_x,
    gint *out_y,
    gint *out_width,
    gint *out_height,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GF_TYPE_DBUS_SCREENSHOT_PROXY (gf_dbus_screenshot_proxy_get_type ())
#define GF_DBUS_SCREENSHOT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_DBUS_SCREENSHOT_PROXY, GfDBusScreenshotProxy))
#define GF_DBUS_SCREENSHOT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_DBUS_SCREENSHOT_PROXY, GfDBusScreenshotProxyClass))
#define GF_DBUS_SCREENSHOT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_DBUS_SCREENSHOT_PROXY, GfDBusScreenshotProxyClass))
#define GF_IS_DBUS_SCREENSHOT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_DBUS_SCREENSHOT_PROXY))
#define GF_IS_DBUS_SCREENSHOT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_DBUS_SCREENSHOT_PROXY))

typedef struct _GfDBusScreenshotProxy GfDBusScreenshotProxy;
typedef struct _GfDBusScreenshotProxyClass GfDBusScreenshotProxyClass;
typedef struct _GfDBusScreenshotProxyPrivate GfDBusScreenshotProxyPrivate;

struct _GfDBusScreenshotProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GfDBusScreenshotProxyPrivate *priv;
};

struct _GfDBusScreenshotProxyClass
{
  GDBusProxyClass parent_class;
};

GType gf_dbus_screenshot_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfDBusScreenshotProxy, g_object_unref)
#endif

void gf_dbus_screenshot_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfDBusScreenshot *gf_dbus_screenshot_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GfDBusScreenshot *gf_dbus_screenshot_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gf_dbus_screenshot_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfDBusScreenshot *gf_dbus_screenshot_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GfDBusScreenshot *gf_dbus_screenshot_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GF_TYPE_DBUS_SCREENSHOT_SKELETON (gf_dbus_screenshot_skeleton_get_type ())
#define GF_DBUS_SCREENSHOT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_DBUS_SCREENSHOT_SKELETON, GfDBusScreenshotSkeleton))
#define GF_DBUS_SCREENSHOT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_DBUS_SCREENSHOT_SKELETON, GfDBusScreenshotSkeletonClass))
#define GF_DBUS_SCREENSHOT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_DBUS_SCREENSHOT_SKELETON, GfDBusScreenshotSkeletonClass))
#define GF_IS_DBUS_SCREENSHOT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_DBUS_SCREENSHOT_SKELETON))
#define GF_IS_DBUS_SCREENSHOT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_DBUS_SCREENSHOT_SKELETON))

typedef struct _GfDBusScreenshotSkeleton GfDBusScreenshotSkeleton;
typedef struct _GfDBusScreenshotSkeletonClass GfDBusScreenshotSkeletonClass;
typedef struct _GfDBusScreenshotSkeletonPrivate GfDBusScreenshotSkeletonPrivate;

struct _GfDBusScreenshotSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GfDBusScreenshotSkeletonPrivate *priv;
};

struct _GfDBusScreenshotSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gf_dbus_screenshot_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfDBusScreenshotSkeleton, g_object_unref)
#endif

GfDBusScreenshot *gf_dbus_screenshot_skeleton_new (void);


G_END_DECLS

#endif /* __GF_DBUS_SCREENSHOT_H__ */
